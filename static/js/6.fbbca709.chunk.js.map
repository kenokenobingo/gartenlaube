{"version":3,"sources":["components/proposals/PostProcessAction.tsx","components/proposals/ProcessAction.tsx","components/proposals/ProcessActionMembership.tsx","components/proposals/ProcessActionTribute.tsx","components/proposals/SponsorAction.tsx","components/proposals/SubmitAction.tsx","components/proposals/ProposalWithOffchainVoteActions.tsx"],"names":["PostProcessAction","props","adapterName","snapshotProposal","proposal","useState","submitError","setSubmitError","actionDisabledReasonsRef","useRef","alreadyCompletedMessage","contracts","useSelector","s","daoRegistryContract","DaoRegistryContract","account","useWeb3Modal","useContractSend","txEtherscanURL","txIsPromptOpen","txSend","txStatus","useMemberActionDisabled","isDisabled","openWhyDisabledModal","WhyDisabledModal","setOtherDisabledReasons","gasPrices","useETHGasPrice","isInProcess","Web3TxStatus","AWAITING_CONFIRM","PENDING","isDone","FULFILLED","isInProcessOrDone","areSomeDisabled","getSubmitConfigsByAdapter","a","ContractAdapterNames","distribute","Error","toIndexArg","msg","payload","metadata","isTypeAllMembers","instance","methods","getNbMembers","call","nbMembers","toString","functionName","functionArguments","contractAddress","contract","getContractByAddress","actionId","txArguments","from","gasPrice","fast","renderSubmitStatusByAdapter","renderButtonTextByAdapter","start","done","useEffect","distributeContract","distributions","idInDAO","distributeProposal","current","DistributionStatus","status","IN_PROGRESS","console","error","Object","values","getActionDisabledReasons","className","disabled","onClick","Loader","ErrorMessageWithDetails","renderText","CycleMessage","intervalMs","messages","TX_CYCLE_MESSAGES","useFirstItemStart","render","message","FadeIn","EtherscanURL","url","isPending","renderSubmitStatus","title","useMemberActionDisabledProps","skipIsActiveMemberCheck","ProcessAction","propsDisabled","daoRegistryAddress","processArguments","ProcessActionMembership","isProposalPassed","membershipProposalAmount","setMembershipProposalAmount","notProposerMessage","OnboardingContract","state","getMembershipProposalAmountCached","useCallback","proposals","proposalDetails","amount","undefined","value","accountAuthorizedToProcessPassedProposal","toLowerCase","ProcessActionTribute","tributeProposalDetails","setTributeProposalDetails","TributeContract","web3Instance","txEtherscanURLTokenApprove","txIsPromptOpenTokenApprove","txSendTokenApprove","txStatusTokenApprove","getTributeProposalDetailsCached","tokenAddress","token","tributeAmount","handleSubmitTokenApprove","lazyERC20ABI","default","erc20Contract","erc20Instance","eth","Contract","allowance","tributeAmountBN","toBN","allowanceBN","gt","difference","sub","approveValue","add","tokenApproveArguments","SponsorAction","snapshotDraft","refetchProposalOrDraft","useSignAndSubmitProposal","proposalSignAndSendStatus","signAndSendProposal","name","body","timestamp","partialProposalData","adapterAddress","type","SnapshotType","data","signature","preparedVoteVerificationBytes","prepareVoteProposalData","choices","snapshot","end","sig","space","parseInt","sponsorArguments","SubmitAction","submitArguments","submitActionArgs","ProposalWithOffchainVoteActions","renderActionProp","renderAction","useProposalWithOffchainVoteStatus","daoProposalVoteResult","daoProposalVotes","proposalFlowStatusError","gracePeriodStartMs","ProposalFlowStatus","OffchainVotingGracePeriod","Number","gracePeriodStartingTime","showPostProcessAction","Completed","VotingState","PASS","renderedActionFromProp","VotingAdapterName","OffchainVotingContract","OffchainVoting","OffchainVotingSubmitResult","Process","countdownGracePeriodStartMs","Submit","Sponsor","onboarding","tribute","renderProcessAction"],"mappings":"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","file":"static/js/6.fbbca709.chunk.js","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {CycleEllipsis} from '../feedback';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData, DistributionStatus} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {ContractAdapterNames, Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype ProcessActionProps = {\n  adapterName: ContractAdapterNames;\n  proposal: ProposalData;\n};\n\ntype SubmitConfigs = {\n  functionName: string;\n  functionArguments: any[];\n};\n\ntype ActionDisabledReasons = {\n  alreadyCompletedMessage: string;\n};\n\n/**\n * @note Attempt to keep this component general to handle any adapters that may\n * have post-process actions\n */\nexport default function PostProcessAction(props: ProcessActionProps) {\n  const {\n    adapterName,\n    proposal: {snapshotProposal},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Refs\n   */\n\n  const actionDisabledReasonsRef = useRef<ActionDisabledReasons>({\n    alreadyCompletedMessage: '',\n  });\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryContract = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n    setOtherDisabledReasons,\n  } = useMemberActionDisabled();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING;\n\n  const isDone = txStatus === Web3TxStatus.FULFILLED;\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n  const areSomeDisabled = isDisabled || isInProcessOrDone;\n\n  /**\n   * Effects\n   */\n\n  useEffect(() => {\n    async function getActionDisabledReasons() {\n      // 1. Determine and set reasons why action would be disabled\n\n      // Reason: distribution already completed\n      if (adapterName === ContractAdapterNames.distribute) {\n        if (!snapshotProposal) {\n          throw new Error('No Snapshot proposal was found.');\n        }\n        if (!daoRegistryContract) {\n          throw new Error('No DAO Registry contract was found.');\n        }\n\n        try {\n          const distributeContract = getContractByAddress(\n            snapshotProposal.actionId,\n            contracts\n          );\n          const distributeProposal = await distributeContract.instance.methods\n            .distributions(\n              daoRegistryContract.contractAddress,\n              snapshotProposal.idInDAO\n            )\n            .call();\n\n          actionDisabledReasonsRef.current = {\n            ...actionDisabledReasonsRef.current,\n            alreadyCompletedMessage:\n              DistributionStatus[distributeProposal.status] !==\n              DistributionStatus[DistributionStatus.IN_PROGRESS]\n                ? 'The transfer has already been completed.'\n                : '',\n          };\n        } catch (error) {\n          console.error(error);\n        }\n      }\n\n      // 2. Set reasons\n      setOtherDisabledReasons(Object.values(actionDisabledReasonsRef.current));\n    }\n\n    getActionDisabledReasons();\n  }, [\n    adapterName,\n    contracts,\n    daoRegistryContract,\n    setOtherDisabledReasons,\n    snapshotProposal,\n  ]);\n\n  /**\n   * Functions\n   */\n\n  async function getSubmitConfigsByAdapter(): Promise<SubmitConfigs> {\n    switch (adapterName) {\n      case ContractAdapterNames.distribute:\n        if (!daoRegistryContract) {\n          throw new Error('No DAO Registry contract was found.');\n        }\n\n        let toIndexArg = '0';\n        const isTypeAllMembers =\n          snapshotProposal?.msg.payload.metadata.isTypeAllMembers;\n        if (isTypeAllMembers) {\n          try {\n            const nbMembers = await daoRegistryContract.instance.methods\n              .getNbMembers()\n              .call();\n            toIndexArg = nbMembers.toString();\n          } catch (error) {\n            throw new Error('Error while retrieving number of DAO members');\n          }\n        }\n\n        return {\n          functionName: 'distribute',\n          functionArguments: [daoRegistryContract.contractAddress, toIndexArg],\n        };\n      default:\n        return {functionName: '', functionArguments: []};\n    }\n  }\n\n  async function handleSubmit() {\n    try {\n      if (!snapshotProposal) {\n        throw new Error('No Snapshot proposal was found.');\n      }\n\n      const contract = getContractByAddress(\n        snapshotProposal.actionId,\n        contracts\n      );\n\n      const {\n        functionName,\n        functionArguments,\n      } = await getSubmitConfigsByAdapter();\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        functionName,\n        contract.instance.methods,\n        functionArguments,\n        txArguments\n      );\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatusByAdapter(): string {\n    switch (adapterName) {\n      case ContractAdapterNames.distribute:\n        return 'Assets transferred!';\n      default:\n        return 'Action submitted!';\n    }\n  }\n\n  function renderButtonTextByAdapter(): {start: string; done: string} {\n    switch (adapterName) {\n      case ContractAdapterNames.distribute:\n        return {start: 'Transfer assets', done: 'Transfer done'};\n      default:\n        return {start: 'Process action', done: 'Done'};\n    }\n  }\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.AWAITING_CONFIRM:\n        return (\n          <>\n            Awaiting your confirmation\n            <CycleEllipsis />\n          </>\n        );\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>{renderSubmitStatusByAdapter()}</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={areSomeDisabled}\n          onClick={areSomeDisabled ? () => {} : handleSubmit}>\n          {isInProcess ? (\n            <Loader />\n          ) : isDone ? (\n            renderButtonTextByAdapter()['done']\n          ) : (\n            renderButtonTextByAdapter()['start']\n          )}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is action disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is action disabled?\" />\n    </>\n  );\n}\n","import {useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {CycleEllipsis} from '../feedback';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype ProcessArguments = [\n  string, // `dao`\n  string // `proposalId`\n];\n\ntype ProcessActionProps = {\n  disabled?: boolean;\n  proposal: ProposalData;\n};\n\n/**\n * Cached outside the component to prevent infinite re-renders.\n *\n * The same can be accomplished inside the component using\n * `useState`, `useRef`, etc., depending on the use case.\n */\nconst useMemberActionDisabledProps = {\n  // Anyone can process a proposal - it's just a question of gas payment.\n  skipIsActiveMemberCheck: true,\n};\n\nexport default function ProcessAction(props: ProcessActionProps) {\n  const {\n    disabled: propsDisabled,\n    proposal: {snapshotProposal},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled(useMemberActionDisabledProps);\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING;\n\n  const isDone = txStatus === Web3TxStatus.FULFILLED;\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n  const areSomeDisabled = isDisabled || isInProcessOrDone || propsDisabled;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotProposal) {\n        throw new Error('No Snapshot proposal was found.');\n      }\n\n      const contract = getContractByAddress(\n        snapshotProposal.actionId,\n        contracts\n      );\n\n      const processArguments: ProcessArguments = [\n        daoRegistryAddress,\n        snapshotProposal.idInDAO,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'processProposal',\n        contract.instance.methods,\n        processArguments,\n        txArguments\n      );\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.AWAITING_CONFIRM:\n        return (\n          <>\n            Awaiting your confirmation\n            <CycleEllipsis />\n          </>\n        );\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={areSomeDisabled}\n          onClick={areSomeDisabled ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Process'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is processing disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is processing disabled?\" />\n    </>\n  );\n}\n","import {useState, useRef, useEffect, useCallback} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {CycleEllipsis} from '../feedback';\nimport {ProposalData, SnapshotProposal} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype ProcessArguments = [\n  string, // `dao`\n  string // `proposalId`\n];\n\ntype ProcessActionMembershipProps = {\n  disabled?: boolean;\n  proposal: ProposalData;\n  isProposalPassed: boolean;\n};\n\ntype ActionDisabledReasons = {\n  notProposerMessage: string;\n};\n\n/**\n * Cached outside the component to prevent infinite re-renders.\n *\n * The same can be accomplished inside the component using\n * `useState`, `useRef`, etc., depending on the use case.\n */\nconst useMemberActionDisabledProps = {\n  // Anyone can process a proposal - it's just a question of gas payment.\n  skipIsActiveMemberCheck: true,\n};\n\nexport default function ProcessActionMembership(\n  props: ProcessActionMembershipProps\n) {\n  const {\n    disabled: propsDisabled,\n    proposal: {snapshotProposal},\n    isProposalPassed,\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n  const [\n    membershipProposalAmount,\n    setMembershipProposalAmount,\n  ] = useState<string>();\n\n  /**\n   * Refs\n   */\n\n  const actionDisabledReasonsRef = useRef<ActionDisabledReasons>({\n    notProposerMessage: '',\n  });\n\n  /**\n   * Selectors\n   */\n\n  const OnboardingContract = useSelector(\n    (state: StoreState) => state.contracts?.OnboardingContract\n  );\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account} = useWeb3Modal();\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n    setOtherDisabledReasons,\n  } = useMemberActionDisabled(useMemberActionDisabledProps);\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING;\n  const isDone = txStatus === Web3TxStatus.FULFILLED;\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n  const areSomeDisabled = isDisabled || isInProcessOrDone || propsDisabled;\n\n  /**\n   * Cached callbacks\n   */\n\n  const getMembershipProposalAmountCached = useCallback(\n    getMembershipProposalAmount,\n    [OnboardingContract, daoRegistryAddress, snapshotProposal]\n  );\n\n  /**\n   * Effects\n   */\n\n  useEffect(() => {\n    if (isProposalPassed) {\n      getMembershipProposalAmountCached();\n    }\n  }, [getMembershipProposalAmountCached, isProposalPassed]);\n\n  useEffect(() => {\n    if (isProposalPassed) {\n      // 1. Determine and set reasons why action would be disabled\n\n      // Reason: For some proposal types, a passed proposal can only be\n      // processed by its original proposer (e.g., the owner of the asset to be\n      // transferred)\n\n      // Proposals with this restriction will have this value stored in its\n      // snapshot metadata.\n      const {\n        accountAuthorizedToProcessPassedProposal,\n      } = (snapshotProposal as SnapshotProposal).msg.payload.metadata;\n\n      if (accountAuthorizedToProcessPassedProposal && account) {\n        actionDisabledReasonsRef.current = {\n          ...actionDisabledReasonsRef.current,\n          notProposerMessage:\n            accountAuthorizedToProcessPassedProposal.toLowerCase() !==\n            account.toLowerCase()\n              ? 'Only the original proposer can process the proposal.'\n              : '',\n        };\n      }\n\n      // 2. Set reasons\n      setOtherDisabledReasons(Object.values(actionDisabledReasonsRef.current));\n    }\n  }, [account, isProposalPassed, setOtherDisabledReasons, snapshotProposal]);\n\n  /**\n   * Functions\n   */\n\n  async function getMembershipProposalAmount() {\n    try {\n      if (!snapshotProposal || !OnboardingContract) return;\n\n      const proposalDetails = await OnboardingContract.instance.methods\n        .proposals(daoRegistryAddress, snapshotProposal.idInDAO)\n        .call();\n\n      setMembershipProposalAmount(proposalDetails.amount);\n    } catch (error) {\n      console.error(error);\n      setMembershipProposalAmount(undefined);\n    }\n  }\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotProposal) {\n        throw new Error('No Snapshot proposal was found.');\n      }\n\n      if (!OnboardingContract) {\n        throw new Error('No OnboardingContract found.');\n      }\n\n      const processArguments: ProcessArguments = [\n        daoRegistryAddress,\n        snapshotProposal.idInDAO,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        value: membershipProposalAmount,\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'processProposal',\n        OnboardingContract.instance.methods,\n        processArguments,\n        txArguments\n      );\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // process proposal transaction statuses\n    switch (txStatus) {\n      case Web3TxStatus.AWAITING_CONFIRM:\n        return (\n          <>\n            Confirm to process the proposal\n            <CycleEllipsis />\n          </>\n        );\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      {isProposalPassed ? (\n        <>\n          <div>\n            <button\n              className=\"proposaldetails__button\"\n              disabled={areSomeDisabled}\n              onClick={areSomeDisabled ? () => {} : handleSubmit}>\n              {isInProcess ? <Loader /> : isDone ? 'Done' : 'Process'}\n            </button>\n\n            <ErrorMessageWithDetails\n              error={submitError}\n              renderText=\"Something went wrong\"\n            />\n\n            {/* SUBMIT STATUS */}\n\n            {isInProcessOrDone && (\n              <div className=\"form__submit-status-container\">\n                {renderSubmitStatus()}\n              </div>\n            )}\n\n            {isDisabled && (\n              <button\n                className=\"button--help-centered\"\n                onClick={openWhyDisabledModal}>\n                Why is processing disabled?\n              </button>\n            )}\n          </div>\n\n          <WhyDisabledModal title=\"Why is processing disabled?\" />\n        </>\n      ) : (\n        // If proposal failed there is no reason to process it. So just show\n        // nothing.\n        <></>\n      )}\n    </>\n  );\n}\n","import {useState, useRef, useEffect, useCallback} from 'react';\nimport {useSelector} from 'react-redux';\nimport {toBN, AbiItem} from 'web3-utils';\n\nimport {CycleEllipsis} from '../feedback';\nimport {ProposalData, SnapshotProposal} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype ProcessArguments = [\n  string, // `dao`\n  string // `proposalId`\n];\n\ntype TokenApproveArguments = [\n  string, // `spender`\n  string // `value`\n];\n\ntype TributeProposalDetails = {\n  tokenAddress: string;\n  tributeAmount: string;\n};\n\ntype ProcessActionTributeProps = {\n  disabled?: boolean;\n  proposal: ProposalData;\n  isProposalPassed: boolean;\n};\n\ntype ActionDisabledReasons = {\n  notProposerMessage: string;\n};\n\n/**\n * Cached outside the component to prevent infinite re-renders.\n *\n * The same can be accomplished inside the component using\n * `useState`, `useRef`, etc., depending on the use case.\n */\nconst useMemberActionDisabledProps = {\n  // Anyone can process a proposal - it's just a question of gas payment.\n  skipIsActiveMemberCheck: true,\n};\n\nexport default function ProcessActionTribute(props: ProcessActionTributeProps) {\n  const {\n    disabled: propsDisabled,\n    proposal: {snapshotProposal},\n    isProposalPassed,\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n  const [\n    tributeProposalDetails,\n    setTributeProposalDetails,\n  ] = useState<TributeProposalDetails>();\n\n  /**\n   * Refs\n   */\n\n  const actionDisabledReasonsRef = useRef<ActionDisabledReasons>({\n    notProposerMessage: '',\n  });\n\n  /**\n   * Selectors\n   */\n\n  const TributeContract = useSelector(\n    (state: StoreState) => state.contracts?.TributeContract\n  );\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account, web3Instance} = useWeb3Modal();\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n  const {\n    txEtherscanURL: txEtherscanURLTokenApprove,\n    txIsPromptOpen: txIsPromptOpenTokenApprove,\n    txSend: txSendTokenApprove,\n    txStatus: txStatusTokenApprove,\n  } = useContractSend();\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n    setOtherDisabledReasons,\n  } = useMemberActionDisabled(useMemberActionDisabledProps);\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING ||\n    txStatusTokenApprove === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatusTokenApprove === Web3TxStatus.PENDING;\n  const isDone = txStatus === Web3TxStatus.FULFILLED;\n  const isInProcessOrDone =\n    isInProcess || isDone || txIsPromptOpen || txIsPromptOpenTokenApprove;\n  const areSomeDisabled = isDisabled || isInProcessOrDone || propsDisabled;\n\n  /**\n   * Cached callbacks\n   */\n\n  const getTributeProposalDetailsCached = useCallback(\n    getTributeProposalDetails,\n    [TributeContract, daoRegistryAddress, snapshotProposal]\n  );\n\n  /**\n   * Effects\n   */\n\n  useEffect(() => {\n    if (isProposalPassed) {\n      getTributeProposalDetailsCached();\n    }\n  }, [getTributeProposalDetailsCached, isProposalPassed]);\n\n  useEffect(() => {\n    if (isProposalPassed) {\n      // 1. Determine and set reasons why action would be disabled\n\n      // Reason: For some proposal types, a passed proposal can only be\n      // processed by its original proposer (e.g., the owner of the asset to be\n      // transferred)\n\n      // Proposals with this restriction will have this value stored in its\n      // snapshot metadata.\n      const {\n        accountAuthorizedToProcessPassedProposal,\n      } = (snapshotProposal as SnapshotProposal).msg.payload.metadata;\n\n      if (accountAuthorizedToProcessPassedProposal && account) {\n        actionDisabledReasonsRef.current = {\n          ...actionDisabledReasonsRef.current,\n          notProposerMessage:\n            accountAuthorizedToProcessPassedProposal.toLowerCase() !==\n            account.toLowerCase()\n              ? 'Only the original proposer can process the proposal.'\n              : '',\n        };\n      }\n\n      // 2. Set reasons\n      setOtherDisabledReasons(Object.values(actionDisabledReasonsRef.current));\n    }\n  }, [account, isProposalPassed, setOtherDisabledReasons, snapshotProposal]);\n\n  /**\n   * Functions\n   */\n\n  async function getTributeProposalDetails() {\n    try {\n      if (!snapshotProposal || !TributeContract) return;\n\n      const proposalDetails = await TributeContract.instance.methods\n        .proposals(daoRegistryAddress, snapshotProposal.idInDAO)\n        .call();\n      const {token: tokenAddress, tributeAmount} = proposalDetails;\n\n      setTributeProposalDetails({tokenAddress, tributeAmount});\n    } catch (error) {\n      console.error(error);\n      setTributeProposalDetails(undefined);\n    }\n  }\n\n  async function handleSubmitTokenApprove() {\n    try {\n      if (!tributeProposalDetails) {\n        throw new Error('No Tribute proposal details found.');\n      }\n\n      if (!TributeContract) {\n        throw new Error('No TributeContract found.');\n      }\n\n      if (!account) {\n        throw new Error('No account found.');\n      }\n\n      const {tokenAddress, tributeAmount} = tributeProposalDetails;\n\n      const {default: lazyERC20ABI} = await import(\n        '../../truffle-contracts/ERC20.json'\n      );\n      const erc20Contract: AbiItem[] = lazyERC20ABI as any;\n      const erc20Instance = new web3Instance.eth.Contract(\n        erc20Contract,\n        tokenAddress\n      );\n\n      // Value to check if adapter is allowed to spend amount of tribute tokens\n      // on behalf of owner. If allowance is not sufficient, the owner will approve the adapter to spend the amount of\n      // tokens needed for the owner to provide the full tribute amount.\n      const allowance = await erc20Instance.methods\n        .allowance(account, TributeContract.contractAddress)\n        .call();\n\n      const tributeAmountBN = toBN(tributeAmount);\n      const allowanceBN = toBN(allowance);\n\n      if (tributeAmountBN.gt(allowanceBN)) {\n        try {\n          const difference = tributeAmountBN.sub(allowanceBN);\n          const approveValue = allowanceBN.add(difference);\n          const tokenApproveArguments: TokenApproveArguments = [\n            TributeContract.contractAddress,\n            approveValue.toString(),\n          ];\n          const txArguments = {\n            from: account || '',\n            // Set a fast gas price\n            ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n          };\n\n          // Execute contract call for `approve`\n          await txSendTokenApprove(\n            'approve',\n            erc20Instance.methods,\n            tokenApproveArguments,\n            txArguments\n          );\n        } catch (error) {\n          throw new Error(\n            'Your ERC20 tokens could not be approved for transfer.'\n          );\n        }\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotProposal) {\n        throw new Error('No Snapshot proposal was found.');\n      }\n\n      if (!TributeContract) {\n        throw new Error('No TributeContract found.');\n      }\n\n      await handleSubmitTokenApprove();\n\n      const processArguments: ProcessArguments = [\n        daoRegistryAddress,\n        snapshotProposal.idInDAO,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'processProposal',\n        TributeContract.instance.methods,\n        processArguments,\n        txArguments\n      );\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // token approve transaction statuses\n    if (txStatusTokenApprove === Web3TxStatus.AWAITING_CONFIRM) {\n      return (\n        <>\n          Confirm to transfer your tokens\n          <CycleEllipsis />\n        </>\n      );\n    }\n\n    if (txStatusTokenApprove === Web3TxStatus.PENDING) {\n      return (\n        <>\n          <div>\n            Approving your tokens for transfer\n            <CycleEllipsis />\n          </div>\n          <EtherscanURL url={txEtherscanURLTokenApprove} isPending />\n        </>\n      );\n    }\n\n    // process proposal transaction statuses\n    switch (txStatus) {\n      case Web3TxStatus.AWAITING_CONFIRM:\n        return (\n          <>\n            Confirm to process the proposal\n            <CycleEllipsis />\n          </>\n        );\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      {isProposalPassed ? (\n        <>\n          <div>\n            <button\n              className=\"proposaldetails__button\"\n              disabled={areSomeDisabled}\n              onClick={areSomeDisabled ? () => {} : handleSubmit}>\n              {isInProcess ? <Loader /> : isDone ? 'Done' : 'Process'}\n            </button>\n\n            <ErrorMessageWithDetails\n              error={submitError}\n              renderText=\"Something went wrong\"\n            />\n\n            {/* SUBMIT STATUS */}\n\n            {isInProcessOrDone && (\n              <div className=\"form__submit-status-container\">\n                {renderSubmitStatus()}\n              </div>\n            )}\n\n            {isDisabled && (\n              <button\n                className=\"button--help-centered\"\n                onClick={openWhyDisabledModal}>\n                Why is processing disabled?\n              </button>\n            )}\n          </div>\n\n          <WhyDisabledModal title=\"Why is processing disabled?\" />\n        </>\n      ) : (\n        // If proposal failed there is no reason to process it. So just show\n        // nothing.\n        <></>\n      )}\n    </>\n  );\n}\n","import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {\n  prepareVoteProposalData,\n  SnapshotType,\n} from '@openlaw/snapshot-js-erc712';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {useSignAndSubmitProposal} from './hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype SponsorArguments = [\n  string, // `dao`\n  string, // `proposalId`\n  string // `proposal data`\n];\n\ntype SponsorActionProps = {\n  proposal: ProposalData;\n};\n\nexport default function SponsorAction(props: SponsorActionProps) {\n  const {\n    proposal: {snapshotDraft, refetchProposalOrDraft},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account, web3Instance} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled();\n\n  const {\n    proposalSignAndSendStatus,\n    signAndSendProposal,\n  } = useSignAndSubmitProposal<SnapshotType.proposal>();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING ||\n    proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    proposalSignAndSendStatus === Web3TxStatus.PENDING;\n\n  const isDone =\n    txStatus === Web3TxStatus.FULFILLED &&\n    proposalSignAndSendStatus === Web3TxStatus.FULFILLED;\n\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotDraft) {\n        throw new Error('No Snapshot draft was found.');\n      }\n\n      const contract = getContractByAddress(snapshotDraft.actionId, contracts);\n\n      const {\n        msg: {\n          payload: {name, body, metadata},\n          timestamp,\n        },\n      } = snapshotDraft;\n\n      // Sign and submit draft for snapshot-hub\n      const {data, signature} = await signAndSendProposal({\n        partialProposalData: {\n          name,\n          body,\n          metadata,\n          timestamp,\n        },\n        adapterAddress: contract.contractAddress,\n        type: SnapshotType.proposal,\n      });\n\n      /**\n       * Prepare `data` argument for submission to DAO\n       *\n       * For information about which data the smart contract needs for signature verification (e.g. `hashMessage`):\n       * @link https://github.com/openlawteam/molochv3-contracts/blob/master/contracts/adapters/voting/OffchainVoting.sol\n       */\n      const preparedVoteVerificationBytes = prepareVoteProposalData(\n        {\n          payload: {\n            name: data.payload.name,\n            body: data.payload.body,\n            choices: data.payload.choices,\n            snapshot: data.payload.snapshot.toString(),\n            start: data.payload.start,\n            end: data.payload.end,\n          },\n          sig: signature,\n          space: data.space,\n          timestamp: parseInt(data.timestamp),\n        },\n        web3Instance\n      );\n\n      const sponsorArguments: SponsorArguments = [\n        daoRegistryAddress,\n        snapshotDraft.idInDAO,\n        preparedVoteVerificationBytes,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'sponsorProposal',\n        contract.instance.methods,\n        sponsorArguments,\n        txArguments\n      );\n\n      // Update the proposal\n      refetchProposalOrDraft();\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Either Snapshot or chain tx\n    if (\n      txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n      proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM\n    ) {\n      return 'Awaiting your confirmation\\u2026';\n    }\n\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={isDisabled || isInProcessOrDone}\n          onClick={isDisabled || isInProcessOrDone ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Sponsor'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is sponsoring disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is sponsoring disabled?\" />\n    </>\n  );\n}\n","import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {\n  prepareVoteProposalData,\n  SnapshotType,\n} from '@openlaw/snapshot-js-erc712';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {useSignAndSubmitProposal} from './hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype SubmitArguments = [\n  string, // `dao`\n  string, // `proposalId`\n  ...any[],\n  string // `proposal data`\n];\n\ntype SubmitActionProps = {\n  proposal: ProposalData;\n};\n\nexport default function SubmitAction(props: SubmitActionProps) {\n  const {\n    proposal: {snapshotDraft, refetchProposalOrDraft},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account, web3Instance} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled();\n\n  const {\n    proposalSignAndSendStatus,\n    signAndSendProposal,\n  } = useSignAndSubmitProposal<SnapshotType.proposal>();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING ||\n    proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    proposalSignAndSendStatus === Web3TxStatus.PENDING;\n\n  const isDone =\n    txStatus === Web3TxStatus.FULFILLED &&\n    proposalSignAndSendStatus === Web3TxStatus.FULFILLED;\n\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotDraft) {\n        throw new Error('No Snapshot draft was found.');\n      }\n\n      const contract = getContractByAddress(snapshotDraft.actionId, contracts);\n\n      const {\n        msg: {\n          payload: {name, body, metadata},\n          timestamp,\n        },\n      } = snapshotDraft;\n\n      // Sign and submit draft for snapshot-hub\n      const {data, signature} = await signAndSendProposal({\n        partialProposalData: {\n          name,\n          body,\n          metadata,\n          timestamp,\n        },\n        adapterAddress: contract.contractAddress,\n        type: SnapshotType.proposal,\n      });\n\n      /**\n       * Prepare `data` argument for submission to DAO\n       *\n       * For information about which data the smart contract needs for signature verification (e.g. `hashMessage`):\n       * @link https://github.com/openlawteam/molochv3-contracts/blob/master/contracts/adapters/voting/OffchainVoting.sol\n       */\n      const preparedVoteVerificationBytes = prepareVoteProposalData(\n        {\n          payload: {\n            name: data.payload.name,\n            body: data.payload.body,\n            choices: data.payload.choices,\n            snapshot: data.payload.snapshot.toString(),\n            start: data.payload.start,\n            end: data.payload.end,\n          },\n          sig: signature,\n          space: data.space,\n          timestamp: parseInt(data.timestamp),\n        },\n        web3Instance\n      );\n\n      const submitArguments: SubmitArguments = [\n        daoRegistryAddress,\n        snapshotDraft.idInDAO,\n        ...(metadata.submitActionArgs || []),\n        preparedVoteVerificationBytes,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'submitProposal',\n        contract.instance.methods,\n        submitArguments,\n        txArguments\n      );\n\n      // Update the proposal\n      refetchProposalOrDraft();\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Either Snapshot or chain tx\n    if (\n      txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n      proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM\n    ) {\n      return 'Awaiting your confirmation\\u2026';\n    }\n\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={isDisabled || isInProcessOrDone}\n          onClick={isDisabled || isInProcessOrDone ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Sponsor'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is sponsoring disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is sponsoring disabled?\" />\n    </>\n  );\n}\n","import {\n  OffchainVotingStatus,\n  OffchainVotingAction,\n  OffchainOpRollupVotingSubmitResultAction,\n} from './voting';\nimport {\n  ProposalData,\n  ProposalFlowStatus,\n  RenderActionPropArguments,\n} from './types';\nimport {ContractAdapterNames} from '../web3/types';\nimport {useProposalWithOffchainVoteStatus} from './hooks';\nimport {VotingAdapterName} from '../adapters-extensions/enums';\nimport {VotingState} from './voting/types';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport PostProcessAction from './PostProcessAction';\nimport ProcessAction from './ProcessAction';\nimport ProcessActionMembership from './ProcessActionMembership';\nimport ProcessActionTribute from './ProcessActionTribute';\nimport SponsorAction from './SponsorAction';\nimport SubmitAction from './SubmitAction';\n\ntype ProposalWithOffchainActionsProps = {\n  adapterName: ContractAdapterNames;\n  proposal: ProposalData;\n  /**\n   * A render prop which can render any action desired.\n   * It is passed inner state and data from\n   * the child action wrapper component.\n   *\n   * - If it renders `null`, it will fall back to the component's actions.\n   * - If it renders `<></>` (`React.Fragment`) then nothing is shown in the UI.\n   */\n  renderAction?: (data: RenderActionPropArguments) => React.ReactNode;\n};\n\nexport default function ProposalWithOffchainVoteActions(\n  props: ProposalWithOffchainActionsProps\n) {\n  const {adapterName, proposal, renderAction: renderActionProp} = props;\n\n  /**\n   * Our hooks\n   */\n\n  const {\n    daoProposalVoteResult,\n    daoProposalVotes,\n    proposalFlowStatusError,\n    status,\n  } = useProposalWithOffchainVoteStatus(proposal);\n\n  /**\n   * Variables\n   */\n\n  // Set the grace period start (per the DAO's timestamp) if the status says we're in grace period.\n  const gracePeriodStartMs: number =\n    daoProposalVotes && status === ProposalFlowStatus.OffchainVotingGracePeriod\n      ? Number(daoProposalVotes.gracePeriodStartingTime) * 1000\n      : 0;\n\n  //  Currently, only Distribute adapter has an action that occurs after the\n  //  proposal is processed.\n  const showPostProcessAction =\n    adapterName === ContractAdapterNames.distribute &&\n    status === ProposalFlowStatus.Completed &&\n    daoProposalVoteResult &&\n    VotingState[daoProposalVoteResult] === VotingState[VotingState.PASS];\n\n  /**\n   * If a render prop was provided it will render it and pass\n   * internal state and data up to the parent component.\n   */\n  const renderedActionFromProp =\n    renderActionProp &&\n    renderActionProp({\n      [VotingAdapterName.OffchainVotingContract]: {\n        adapterName,\n        daoProposalVoteResult,\n        daoProposalVotes,\n        gracePeriodStartMs,\n        proposal,\n        status,\n      },\n    });\n\n  /**\n   * Functions\n   */\n\n  function renderProcessAction() {\n    switch (adapterName) {\n      case ContractAdapterNames.onboarding:\n        return (\n          <ProcessActionMembership\n            // Show during DAO proposal grace period, but set to disabled\n            disabled={status === ProposalFlowStatus.OffchainVotingGracePeriod}\n            proposal={proposal}\n            isProposalPassed={\n              !!(\n                daoProposalVoteResult &&\n                VotingState[daoProposalVoteResult] ===\n                  VotingState[VotingState.PASS]\n              )\n            }\n          />\n        );\n      case ContractAdapterNames.tribute:\n        return (\n          <ProcessActionTribute\n            // Show during DAO proposal grace period, but set to disabled\n            disabled={status === ProposalFlowStatus.OffchainVotingGracePeriod}\n            proposal={proposal}\n            isProposalPassed={\n              !!(\n                daoProposalVoteResult &&\n                VotingState[daoProposalVoteResult] ===\n                  VotingState[VotingState.PASS]\n              )\n            }\n          />\n        );\n      default:\n        return (\n          <ProcessAction\n            // Show during DAO proposal grace period, but set to disabled\n            disabled={status === ProposalFlowStatus.OffchainVotingGracePeriod}\n            proposal={proposal}\n          />\n        );\n    }\n  }\n\n  function renderActions(): React.ReactNode {\n    // If render prop did not return `null` then render its content\n    if (renderedActionFromProp) {\n      return renderedActionFromProp;\n    }\n\n    // Submit/Sponsor button (for proposals that have not been submitted onchain yet)\n    if (status === ProposalFlowStatus.Submit) {\n      return <SubmitAction proposal={proposal} />;\n    }\n\n    // Sponsor button\n    if (status === ProposalFlowStatus.Sponsor) {\n      return <SponsorAction proposal={proposal} />;\n    }\n\n    // Off-chain voting buttons\n    if (status === ProposalFlowStatus.OffchainVoting) {\n      return (\n        <OffchainVotingAction adapterName={adapterName} proposal={proposal} />\n      );\n    }\n\n    // Off-chain voting submit vote result\n    if (status === ProposalFlowStatus.OffchainVotingSubmitResult) {\n      return (\n        <OffchainOpRollupVotingSubmitResultAction\n          adapterName={adapterName}\n          proposal={proposal}\n        />\n      );\n    }\n\n    // Process button\n    // @todo Remove and use render prop\n    if (\n      status === ProposalFlowStatus.Process ||\n      status === ProposalFlowStatus.OffchainVotingGracePeriod\n    ) {\n      return renderProcessAction();\n    }\n\n    // Post-process button\n    // @todo Remove and use render prop\n    if (showPostProcessAction) {\n      return (\n        <PostProcessAction adapterName={adapterName} proposal={proposal} />\n      );\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  return (\n    <>\n      {/* STATUS */}\n\n      {(status === ProposalFlowStatus.OffchainVoting ||\n        status === ProposalFlowStatus.OffchainVotingSubmitResult ||\n        status === ProposalFlowStatus.OffchainVotingGracePeriod ||\n        status === ProposalFlowStatus.Process ||\n        status === ProposalFlowStatus.Completed) && (\n        <OffchainVotingStatus\n          countdownGracePeriodStartMs={gracePeriodStartMs}\n          proposal={proposal}\n        />\n      )}\n\n      {/* ACTIONS */}\n\n      <div className=\"proposaldetails__button-container\">{renderActions()}</div>\n\n      {/* ERROR */}\n\n      <ErrorMessageWithDetails\n        error={proposalFlowStatusError}\n        renderText=\"Something went wrong while getting the proposal's status\"\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}