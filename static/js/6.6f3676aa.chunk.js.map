{"version":3,"sources":["components/proposals/SponsorAction.tsx","components/proposals/ProcessAction.tsx","components/proposals/PostProcessAction.tsx","components/proposals/ProposalWithOffchainVoteActions.tsx"],"names":["SponsorAction","props","proposal","snapshotDraft","refetchProposalOrDraft","useState","submitError","setSubmitError","contracts","useSelector","s","daoRegistryAddress","DaoRegistryContract","contractAddress","useWeb3Modal","account","web3Instance","useContractSend","txEtherscanURL","txIsPromptOpen","txSend","txStatus","useMemberActionDisabled","isDisabled","openWhyDisabledModal","WhyDisabledModal","useSignAndSubmitProposal","proposalSignAndSendStatus","signAndSendProposal","gasPrices","useETHGasPrice","isInProcess","Web3TxStatus","AWAITING_CONFIRM","PENDING","isDone","FULFILLED","isInProcessOrDone","a","Error","contract","getContractByAddress","actionId","msg","payload","name","body","metadata","timestamp","partialProposalData","adapterAddress","type","SnapshotType","data","signature","preparedVoteVerificationBytes","prepareVoteProposalData","choices","snapshot","toString","start","end","sig","space","parseInt","sponsorArguments","idInDAO","txArguments","from","gasPrice","fast","instance","methods","className","disabled","onClick","Loader","ErrorMessageWithDetails","error","renderText","CycleMessage","intervalMs","messages","TX_CYCLE_MESSAGES","useFirstItemStart","render","message","FadeIn","EtherscanURL","url","isPending","renderSubmitStatus","title","useMemberActionDisabledProps","skipIsActiveMemberCheck","ProcessAction","propsDisabled","snapshotProposal","areSomeDisabled","processArguments","PostProcessAction","adapterName","actionDisabledReasonsRef","useRef","alreadyCompletedMessage","daoRegistryContract","setOtherDisabledReasons","getSubmitConfigsByAdapter","ContractAdapterNames","distribute","toIndexArg","isTypeAllMembers","getNbMembers","call","nbMembers","functionName","functionArguments","renderSubmitStatusByAdapter","renderButtonTextByAdapter","done","useEffect","distributeContract","distributions","distributeProposal","current","DistributionStatus","status","IN_PROGRESS","console","Object","values","getActionDisabledReasons","ProposalWithOffchainVoteActions","useProposalWithOffchainVoteStatus","daoProposalVotes","daoProposalVoteResult","gracePeriodStartMs","ProposalFlowStatus","OffchainVotingGracePeriod","Number","gracePeriodStartingTime","showPostProcessAction","Completed","VotingState","PASS","OffchainVoting","OffchainVotingSubmitResult","Process","countdownGracePeriodStartMs","Sponsor"],"mappings":"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","file":"static/js/6.6f3676aa.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {\n  prepareVoteProposalData,\n  SnapshotType,\n} from '@openlaw/snapshot-js-erc712';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {useSignAndSubmitProposal} from './hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype SponsorArguments = [\n  string, // `dao`\n  string, // `proposalId`\n  string // `proposal data`\n];\n\ntype SponsorActionProps = {\n  proposal: ProposalData;\n};\n\nexport default function SponsorAction(props: SponsorActionProps) {\n  const {\n    proposal: {snapshotDraft, refetchProposalOrDraft},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account, web3Instance} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled();\n\n  const {\n    proposalSignAndSendStatus,\n    signAndSendProposal,\n  } = useSignAndSubmitProposal<SnapshotType.proposal>();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING ||\n    proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    proposalSignAndSendStatus === Web3TxStatus.PENDING;\n\n  const isDone =\n    txStatus === Web3TxStatus.FULFILLED &&\n    proposalSignAndSendStatus === Web3TxStatus.FULFILLED;\n\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotDraft) {\n        throw new Error('No Snapshot draft was found.');\n      }\n\n      const contract = getContractByAddress(snapshotDraft.actionId, contracts);\n\n      const {\n        msg: {\n          payload: {name, body, metadata},\n          timestamp,\n        },\n      } = snapshotDraft;\n\n      // Sign and submit draft for snapshot-hub\n      const {data, signature} = await signAndSendProposal({\n        partialProposalData: {\n          name,\n          body,\n          metadata,\n          timestamp,\n        },\n        adapterAddress: contract.contractAddress,\n        type: SnapshotType.proposal,\n      });\n\n      /**\n       * Prepare `data` argument for submission to DAO\n       *\n       * For information about which data the smart contract needs for signature verification (e.g. `hashMessage`):\n       * @link https://github.com/openlawteam/molochv3-contracts/blob/master/contracts/adapters/voting/OffchainVoting.sol\n       */\n      const preparedVoteVerificationBytes = prepareVoteProposalData(\n        {\n          payload: {\n            name: data.payload.name,\n            body: data.payload.body,\n            choices: data.payload.choices,\n            snapshot: data.payload.snapshot.toString(),\n            start: data.payload.start,\n            end: data.payload.end,\n          },\n          sig: signature,\n          space: data.space,\n          timestamp: parseInt(data.timestamp),\n        },\n        web3Instance\n      );\n\n      const sponsorArguments: SponsorArguments = [\n        daoRegistryAddress,\n        snapshotDraft.idInDAO,\n        preparedVoteVerificationBytes,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'sponsorProposal',\n        contract.instance.methods,\n        sponsorArguments,\n        txArguments\n      );\n\n      // Update the proposal\n      refetchProposalOrDraft();\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Either Snapshot or chain tx\n    if (\n      txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n      proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM\n    ) {\n      return 'Awaiting your confirmation\\u2026';\n    }\n\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={isDisabled || isInProcessOrDone}\n          onClick={isDisabled || isInProcessOrDone ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Sponsor'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is sponsoring disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is sponsoring disabled?\" />\n    </>\n  );\n}\n","import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {CycleEllipsis} from '../feedback';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype ProcessArguments = [\n  string, // `dao`\n  string // `proposalId`\n];\n\ntype ProcessActionProps = {\n  disabled?: boolean;\n  proposal: ProposalData;\n};\n\n/**\n * Cached outside the component to prevent infinite re-renders.\n *\n * The same can be accomplished inside the component using\n * `useState`, `useRef`, etc., depending on the use case.\n */\nconst useMemberActionDisabledProps = {\n  // Anyone can process a proposal - it's just a question of gas payment.\n  skipIsActiveMemberCheck: true,\n};\n\nexport default function ProcessAction(props: ProcessActionProps) {\n  const {\n    disabled: propsDisabled,\n    proposal: {snapshotProposal},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled(useMemberActionDisabledProps);\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING;\n\n  const isDone = txStatus === Web3TxStatus.FULFILLED;\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n  const areSomeDisabled = isDisabled || isInProcessOrDone || propsDisabled;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotProposal) {\n        throw new Error('No Snapshot proposal was found.');\n      }\n\n      const contract = getContractByAddress(\n        snapshotProposal.actionId,\n        contracts\n      );\n\n      const processArguments: ProcessArguments = [\n        daoRegistryAddress,\n        snapshotProposal.idInDAO,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'processProposal',\n        contract.instance.methods,\n        processArguments,\n        txArguments\n      );\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.AWAITING_CONFIRM:\n        return (\n          <>\n            Awaiting your confirmation\n            <CycleEllipsis />\n          </>\n        );\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={areSomeDisabled}\n          onClick={areSomeDisabled ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Process'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is processing disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is processing disabled?\" />\n    </>\n  );\n}\n","import React, {useEffect, useState, useRef} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {CycleEllipsis} from '../feedback';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData, DistributionStatus} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {ContractAdapterNames, Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype ProcessActionProps = {\n  adapterName: ContractAdapterNames;\n  proposal: ProposalData;\n};\n\ntype SubmitConfigs = {\n  functionName: string;\n  functionArguments: any[];\n};\n\ntype ActionDisabledReasons = {\n  alreadyCompletedMessage: string;\n};\n\n/**\n * @note Attempt to keep this component general to handle any adapters that may\n * have post-process actions\n */\nexport default function PostProcessAction(props: ProcessActionProps) {\n  const {\n    adapterName,\n    proposal: {snapshotProposal},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Refs\n   */\n\n  const actionDisabledReasonsRef = useRef<ActionDisabledReasons>({\n    alreadyCompletedMessage: '',\n  });\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryContract = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n    setOtherDisabledReasons,\n  } = useMemberActionDisabled();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING;\n\n  const isDone = txStatus === Web3TxStatus.FULFILLED;\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n  const areSomeDisabled = isDisabled || isInProcessOrDone;\n\n  /**\n   * Effects\n   */\n\n  useEffect(() => {\n    async function getActionDisabledReasons() {\n      // 1. Determine and set reasons why action would be disabled\n\n      // Reason: distribution already completed\n      if (adapterName === ContractAdapterNames.distribute) {\n        if (!snapshotProposal) {\n          throw new Error('No Snapshot proposal was found.');\n        }\n        if (!daoRegistryContract) {\n          throw new Error('No DAO Registry contract was found.');\n        }\n\n        try {\n          const distributeContract = getContractByAddress(\n            snapshotProposal.actionId,\n            contracts\n          );\n          const distributeProposal = await distributeContract.instance.methods\n            .distributions(\n              daoRegistryContract.contractAddress,\n              snapshotProposal.idInDAO\n            )\n            .call();\n\n          actionDisabledReasonsRef.current = {\n            ...actionDisabledReasonsRef.current,\n            alreadyCompletedMessage:\n              DistributionStatus[distributeProposal.status] !==\n              DistributionStatus[DistributionStatus.IN_PROGRESS]\n                ? 'The transfer has already been completed.'\n                : '',\n          };\n        } catch (error) {\n          console.error(error);\n        }\n      }\n\n      // 2. Set reasons\n      setOtherDisabledReasons(Object.values(actionDisabledReasonsRef.current));\n    }\n\n    getActionDisabledReasons();\n  }, [\n    adapterName,\n    contracts,\n    daoRegistryContract,\n    setOtherDisabledReasons,\n    snapshotProposal,\n  ]);\n\n  /**\n   * Functions\n   */\n\n  async function getSubmitConfigsByAdapter(): Promise<SubmitConfigs> {\n    switch (adapterName) {\n      case ContractAdapterNames.distribute:\n        if (!daoRegistryContract) {\n          throw new Error('No DAO Registry contract was found.');\n        }\n\n        let toIndexArg = '0';\n        const isTypeAllMembers =\n          snapshotProposal?.msg.payload.metadata.isTypeAllMembers;\n        if (isTypeAllMembers) {\n          try {\n            const nbMembers = await daoRegistryContract.instance.methods\n              .getNbMembers()\n              .call();\n            toIndexArg = nbMembers.toString();\n          } catch (error) {\n            throw new Error('Error while retrieving number of DAO members');\n          }\n        }\n\n        return {\n          functionName: 'distribute',\n          functionArguments: [daoRegistryContract.contractAddress, toIndexArg],\n        };\n      default:\n        return {functionName: '', functionArguments: []};\n    }\n  }\n\n  async function handleSubmit() {\n    try {\n      if (!snapshotProposal) {\n        throw new Error('No Snapshot proposal was found.');\n      }\n\n      const contract = getContractByAddress(\n        snapshotProposal.actionId,\n        contracts\n      );\n\n      const {\n        functionName,\n        functionArguments,\n      } = await getSubmitConfigsByAdapter();\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        functionName,\n        contract.instance.methods,\n        functionArguments,\n        txArguments\n      );\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatusByAdapter(): string {\n    switch (adapterName) {\n      case ContractAdapterNames.distribute:\n        return 'Assets transferred!';\n      default:\n        return 'Action submitted!';\n    }\n  }\n\n  function renderButtonTextByAdapter(): {start: string; done: string} {\n    switch (adapterName) {\n      case ContractAdapterNames.distribute:\n        return {start: 'Transfer assets', done: 'Transfer done'};\n      default:\n        return {start: 'Process action', done: 'Done'};\n    }\n  }\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.AWAITING_CONFIRM:\n        return (\n          <>\n            Awaiting your confirmation\n            <CycleEllipsis />\n          </>\n        );\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>{renderSubmitStatusByAdapter()}</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={areSomeDisabled}\n          onClick={areSomeDisabled ? () => {} : handleSubmit}>\n          {isInProcess ? (\n            <Loader />\n          ) : isDone ? (\n            renderButtonTextByAdapter()['done']\n          ) : (\n            renderButtonTextByAdapter()['start']\n          )}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is action disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is action disabled?\" />\n    </>\n  );\n}\n","import React from 'react';\n\nimport {\n  OffchainVotingStatus,\n  OffchainVotingAction,\n  OffchainOpRollupVotingSubmitResultAction,\n} from './voting';\nimport {VotingState} from './voting/types';\nimport {ContractAdapterNames} from '../web3/types';\nimport {ProposalData, ProposalFlowStatus} from './types';\nimport {useProposalWithOffchainVoteStatus} from './hooks';\nimport SponsorAction from './SponsorAction';\nimport ProcessAction from './ProcessAction';\nimport PostProcessAction from './PostProcessAction';\n\ntype ProposalWithOffchainActionsProps = {\n  adapterName: ContractAdapterNames;\n  proposal: ProposalData;\n};\n\nexport default function ProposalWithOffchainVoteActions(\n  props: ProposalWithOffchainActionsProps\n) {\n  const {adapterName, proposal} = props;\n\n  /**\n   * Our hooks\n   */\n\n  const {\n    daoProposalVotes,\n    status,\n    daoProposalVoteResult,\n  } = useProposalWithOffchainVoteStatus(proposal);\n\n  /**\n   * Variables\n   */\n\n  // Set the grace period start (per the DAO's timestamp) if the status says we're in grace period.\n  const gracePeriodStartMs: number =\n    daoProposalVotes && status === ProposalFlowStatus.OffchainVotingGracePeriod\n      ? Number(daoProposalVotes.gracePeriodStartingTime) * 1000\n      : 0;\n  //  Currently, only Distribute adapter has an action that occurs after the\n  //  proposal is processed.\n  const showPostProcessAction =\n    adapterName === ContractAdapterNames.distribute &&\n    status === ProposalFlowStatus.Completed &&\n    daoProposalVoteResult &&\n    VotingState[daoProposalVoteResult] === VotingState[VotingState.PASS];\n\n  /**\n   * Render\n   */\n  return (\n    <>\n      {/* OFF-CHAIN VOTING STATUS */}\n      {(status === ProposalFlowStatus.OffchainVoting ||\n        status === ProposalFlowStatus.OffchainVotingSubmitResult ||\n        status === ProposalFlowStatus.OffchainVotingGracePeriod ||\n        status === ProposalFlowStatus.Process ||\n        status === ProposalFlowStatus.Completed) && (\n        <OffchainVotingStatus\n          countdownGracePeriodStartMs={gracePeriodStartMs}\n          proposal={proposal}\n        />\n      )}\n\n      <div className=\"proposaldetails__button-container\">\n        {/* SPONSOR BUTTON */}\n        {status === ProposalFlowStatus.Sponsor && (\n          <SponsorAction proposal={proposal} />\n        )}\n\n        {/* OFF-CHAIN VOTING BUTTONS */}\n        {status === ProposalFlowStatus.OffchainVoting && (\n          <OffchainVotingAction adapterName={adapterName} proposal={proposal} />\n        )}\n\n        {/* OFF-CHAIN VOTING SUBMIT VOTE RESULT */}\n        {/* @todo A wrapping component to get the correct off-chain voting component */}\n        {status === ProposalFlowStatus.OffchainVotingSubmitResult && (\n          <OffchainOpRollupVotingSubmitResultAction\n            adapterName={adapterName}\n            proposal={proposal}\n          />\n        )}\n\n        {(status === ProposalFlowStatus.OffchainVotingGracePeriod ||\n          status === ProposalFlowStatus.Process) && (\n          <ProcessAction\n            // Show during DAO proposal grace period, but set to disabled\n            disabled={status === ProposalFlowStatus.OffchainVotingGracePeriod}\n            proposal={proposal}\n          />\n        )}\n\n        {showPostProcessAction && (\n          <PostProcessAction adapterName={adapterName} proposal={proposal} />\n        )}\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}