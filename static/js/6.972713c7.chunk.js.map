{"version":3,"sources":["components/proposals/ProcessAction.tsx","components/proposals/SponsorAction.tsx","components/proposals/SubmitAction.tsx","components/proposals/ProposalWithOffchainVoteActions.tsx"],"names":["useMemberActionDisabledProps","skipIsActiveMemberCheck","ProcessAction","props","propsDisabled","disabled","snapshotProposal","proposal","useState","submitError","setSubmitError","contracts","useSelector","s","daoRegistryContract","DaoRegistryContract","useWeb3Modal","account","web3Instance","useContractSend","txEtherscanURL","txIsPromptOpen","txSend","txStatus","useMemberActionDisabled","isDisabled","openWhyDisabledModal","WhyDisabledModal","gasPrices","useETHGasPrice","dispatch","useDispatch","isInProcess","Web3TxStatus","AWAITING_CONFIRM","PENDING","isDone","FULFILLED","isInProcessOrDone","areSomeDisabled","a","Error","contract","getContractByAddress","actionId","processArguments","contractAddress","idInDAO","txArguments","from","gasPrice","fast","instance","methods","getConnectedMember","className","onClick","Loader","ErrorMessageWithDetails","error","renderText","CycleMessage","intervalMs","messages","TX_CYCLE_MESSAGES","useFirstItemStart","render","message","FadeIn","EtherscanURL","url","isPending","renderSubmitStatus","title","SponsorAction","snapshotDraft","refetchProposalOrDraft","daoRegistryAddress","useSignAndSubmitProposal","proposalSignAndSendStatus","signAndSendProposal","msg","payload","name","body","metadata","timestamp","partialProposalData","adapterAddress","type","SnapshotType","data","signature","preparedVoteVerificationBytes","prepareVoteProposalData","choices","snapshot","toString","start","end","sig","space","parseInt","sponsorArguments","SubmitAction","submitArguments","submitActionArgs","ProposalWithOffchainVoteActions","adapterName","renderActionProp","renderAction","useProposalWithOffchainVoteStatus","daoProposalVoteResult","daoProposalVotes","proposalFlowStatusError","status","gracePeriodStartMs","ProposalFlowStatus","OffchainVotingGracePeriod","Number","gracePeriodStartingTime","Date","now","renderedActionFromProp","VotingAdapterName","OffchainVotingContract","OffchainVoting","OffchainVotingSubmitResult","Process","Completed","countdownGracePeriodStartMs","Submit","Sponsor"],"mappings":"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","file":"static/js/6.972713c7.chunk.js","sourcesContent":["import {useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {CycleEllipsis} from '../feedback';\nimport {getConnectedMember} from '../../store/actions';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {ReduxDispatch, StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype ProcessArguments = [\n  string, // `dao`\n  string // `proposalId`\n];\n\ntype ProcessActionProps = {\n  disabled?: boolean;\n  proposal: ProposalData;\n};\n\n/**\n * Cached outside the component to prevent infinite re-renders.\n *\n * The same can be accomplished inside the component using\n * `useState`, `useRef`, etc., depending on the use case.\n */\nconst useMemberActionDisabledProps = {\n  // Anyone can process a proposal - it's just a question of gas payment.\n  skipIsActiveMemberCheck: true,\n};\n\nexport default function ProcessAction(props: ProcessActionProps) {\n  const {\n    disabled: propsDisabled,\n    proposal: {snapshotProposal},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryContract = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account, web3Instance} = useWeb3Modal();\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled(useMemberActionDisabledProps);\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Their hooks\n   */\n\n  const dispatch = useDispatch<ReduxDispatch>();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING;\n\n  const isDone = txStatus === Web3TxStatus.FULFILLED;\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n  const areSomeDisabled = isDisabled || isInProcessOrDone || propsDisabled;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryContract) {\n        throw new Error('No DAO Registry contract was found.');\n      }\n\n      if (!snapshotProposal) {\n        throw new Error('No Snapshot proposal was found.');\n      }\n\n      if (!account) {\n        throw new Error('No account found.');\n      }\n\n      if (!web3Instance) {\n        throw new Error('No Web3 instance was found.');\n      }\n\n      const contract = getContractByAddress(\n        snapshotProposal.actionId,\n        contracts\n      );\n\n      const processArguments: ProcessArguments = [\n        daoRegistryContract.contractAddress,\n        snapshotProposal.idInDAO,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      const tx = await txSend(\n        'processProposal',\n        contract.instance.methods,\n        processArguments,\n        txArguments\n      );\n\n      if (tx) {\n        // re-fetch member\n        await dispatch(\n          getConnectedMember({account, daoRegistryContract, web3Instance})\n        );\n      }\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.AWAITING_CONFIRM:\n        return (\n          <>\n            Awaiting your confirmation\n            <CycleEllipsis />\n          </>\n        );\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={areSomeDisabled}\n          onClick={areSomeDisabled ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Process'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is processing disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is processing disabled?\" />\n    </>\n  );\n}\n","import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {\n  prepareVoteProposalData,\n  SnapshotType,\n} from '@openlaw/snapshot-js-erc712';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {useSignAndSubmitProposal} from './hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype SponsorArguments = [\n  string, // `dao`\n  string, // `proposalId`\n  string // `proposal data`\n];\n\ntype SponsorActionProps = {\n  proposal: ProposalData;\n};\n\nexport default function SponsorAction(props: SponsorActionProps) {\n  const {\n    proposal: {snapshotDraft, refetchProposalOrDraft},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account, web3Instance} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled();\n\n  const {\n    proposalSignAndSendStatus,\n    signAndSendProposal,\n  } = useSignAndSubmitProposal<SnapshotType.proposal>();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING ||\n    proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    proposalSignAndSendStatus === Web3TxStatus.PENDING;\n\n  const isDone =\n    txStatus === Web3TxStatus.FULFILLED &&\n    proposalSignAndSendStatus === Web3TxStatus.FULFILLED;\n\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotDraft) {\n        throw new Error('No Snapshot draft was found.');\n      }\n\n      const contract = getContractByAddress(snapshotDraft.actionId, contracts);\n\n      const {\n        msg: {\n          payload: {name, body, metadata},\n          timestamp,\n        },\n      } = snapshotDraft;\n\n      // Sign and submit draft for snapshot-hub\n      const {data, signature} = await signAndSendProposal({\n        partialProposalData: {\n          name,\n          body,\n          metadata,\n          timestamp,\n        },\n        adapterAddress: contract.contractAddress,\n        type: SnapshotType.proposal,\n      });\n\n      /**\n       * Prepare `data` argument for submission to DAO\n       *\n       * For information about which data the smart contract needs for signature verification (e.g. `hashMessage`):\n       * @link https://github.com/openlawteam/tribute-contracts/blob/master/contracts/adapters/voting/OffchainVoting.sol\n       */\n      const preparedVoteVerificationBytes = prepareVoteProposalData(\n        {\n          payload: {\n            name: data.payload.name,\n            body: data.payload.body,\n            choices: data.payload.choices,\n            snapshot: data.payload.snapshot.toString(),\n            start: data.payload.start,\n            end: data.payload.end,\n          },\n          sig: signature,\n          space: data.space,\n          timestamp: parseInt(data.timestamp),\n        },\n        web3Instance\n      );\n\n      const sponsorArguments: SponsorArguments = [\n        daoRegistryAddress,\n        snapshotDraft.idInDAO,\n        preparedVoteVerificationBytes,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'sponsorProposal',\n        contract.instance.methods,\n        sponsorArguments,\n        txArguments\n      );\n\n      // Update the proposal\n      refetchProposalOrDraft();\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Either Snapshot or chain tx\n    if (\n      txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n      proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM\n    ) {\n      return 'Awaiting your confirmation\\u2026';\n    }\n\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={isDisabled || isInProcessOrDone}\n          onClick={isDisabled || isInProcessOrDone ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Sponsor'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is sponsoring disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is sponsoring disabled?\" />\n    </>\n  );\n}\n","import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {\n  prepareVoteProposalData,\n  SnapshotType,\n} from '@openlaw/snapshot-js-erc712';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {useSignAndSubmitProposal} from './hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype SubmitArguments = [\n  string, // `dao`\n  string, // `proposalId`\n  ...any[],\n  string // `proposal data`\n];\n\ntype SubmitActionProps = {\n  proposal: ProposalData;\n};\n\nexport default function SubmitAction(props: SubmitActionProps) {\n  const {\n    proposal: {snapshotDraft, refetchProposalOrDraft},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account, web3Instance} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled();\n\n  const {\n    proposalSignAndSendStatus,\n    signAndSendProposal,\n  } = useSignAndSubmitProposal<SnapshotType.proposal>();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING ||\n    proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    proposalSignAndSendStatus === Web3TxStatus.PENDING;\n\n  const isDone =\n    txStatus === Web3TxStatus.FULFILLED &&\n    proposalSignAndSendStatus === Web3TxStatus.FULFILLED;\n\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotDraft) {\n        throw new Error('No Snapshot draft was found.');\n      }\n\n      const contract = getContractByAddress(snapshotDraft.actionId, contracts);\n\n      const {\n        msg: {\n          payload: {name, body, metadata},\n          timestamp,\n        },\n      } = snapshotDraft;\n\n      // Sign and submit draft for snapshot-hub\n      const {data, signature} = await signAndSendProposal({\n        partialProposalData: {\n          name,\n          body,\n          metadata,\n          timestamp,\n        },\n        adapterAddress: contract.contractAddress,\n        type: SnapshotType.proposal,\n      });\n\n      /**\n       * Prepare `data` argument for submission to DAO\n       *\n       * For information about which data the smart contract needs for signature verification (e.g. `hashMessage`):\n       * @link https://github.com/openlawteam/tribute-contracts/blob/master/contracts/adapters/voting/OffchainVoting.sol\n       */\n      const preparedVoteVerificationBytes = prepareVoteProposalData(\n        {\n          payload: {\n            name: data.payload.name,\n            body: data.payload.body,\n            choices: data.payload.choices,\n            snapshot: data.payload.snapshot.toString(),\n            start: data.payload.start,\n            end: data.payload.end,\n          },\n          sig: signature,\n          space: data.space,\n          timestamp: parseInt(data.timestamp),\n        },\n        web3Instance\n      );\n\n      const submitArguments: SubmitArguments = [\n        daoRegistryAddress,\n        snapshotDraft.idInDAO,\n        ...(metadata.submitActionArgs || []),\n        preparedVoteVerificationBytes,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'submitProposal',\n        contract.instance.methods,\n        submitArguments,\n        txArguments\n      );\n\n      // Update the proposal\n      refetchProposalOrDraft();\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Either Snapshot or chain tx\n    if (\n      txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n      proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM\n    ) {\n      return 'Awaiting your confirmation\\u2026';\n    }\n\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={isDisabled || isInProcessOrDone}\n          onClick={isDisabled || isInProcessOrDone ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Sponsor'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is sponsoring disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is sponsoring disabled?\" />\n    </>\n  );\n}\n","import {\n  OffchainVotingStatus,\n  OffchainVotingAction,\n  OffchainOpRollupVotingSubmitResultAction,\n} from './voting';\nimport {\n  ProposalData,\n  ProposalFlowStatus,\n  RenderActionPropArguments,\n} from './types';\nimport {ContractAdapterNames} from '../web3/types';\nimport {useProposalWithOffchainVoteStatus} from './hooks';\nimport {VotingAdapterName} from '../adapters-extensions/enums';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport ProcessAction from './ProcessAction';\nimport SponsorAction from './SponsorAction';\nimport SubmitAction from './SubmitAction';\n\ntype ProposalWithOffchainActionsProps = {\n  adapterName: ContractAdapterNames;\n  proposal: ProposalData;\n  /**\n   * A render prop which can render any action desired.\n   * It is passed inner state and data from\n   * the child action wrapper component.\n   *\n   * - If it renders `null`, it will fall back to the component's actions.\n   * - If it renders `<></>` (`React.Fragment`) then nothing is shown in the UI.\n   */\n  renderAction?: (data: RenderActionPropArguments) => React.ReactNode;\n};\n\nexport default function ProposalWithOffchainVoteActions(\n  props: ProposalWithOffchainActionsProps\n) {\n  const {adapterName, proposal, renderAction: renderActionProp} = props;\n\n  /**\n   * Our hooks\n   */\n\n  const {\n    daoProposalVoteResult,\n    daoProposalVotes,\n    proposalFlowStatusError,\n    status,\n  } = useProposalWithOffchainVoteStatus(proposal);\n\n  /**\n   * Variables\n   */\n\n  /**\n   * Set the grace period start milliseconds either by\n   *\n   * 1) the DAO's grace period start timestamp,\n   * 2) or by `Date.now()` (i.e. no result was submitted).\n   *\n   * We fall back to case 2 so that the grace period timer will\n   * start, as it requires any `Number` above `0`.\n   */\n  const gracePeriodStartMs: number =\n    daoProposalVotes && status === ProposalFlowStatus.OffchainVotingGracePeriod\n      ? Number(daoProposalVotes.gracePeriodStartingTime) * 1000 || Date.now()\n      : 0;\n\n  /**\n   * If a render prop was provided it will render it and pass\n   * internal state and data up to the parent component.\n   */\n  const renderedActionFromProp =\n    renderActionProp &&\n    renderActionProp({\n      [VotingAdapterName.OffchainVotingContract]: {\n        adapterName,\n        daoProposalVoteResult,\n        daoProposalVotes,\n        gracePeriodStartMs,\n        proposal,\n        status,\n      },\n    });\n\n  /**\n   * Functions\n   */\n\n  function renderActions(): React.ReactNode {\n    // If render prop did not return `null` then render its content\n    if (renderedActionFromProp) {\n      return renderedActionFromProp;\n    }\n\n    // Submit/Sponsor button (for proposals that have not been submitted onchain yet)\n    if (status === ProposalFlowStatus.Submit) {\n      return <SubmitAction proposal={proposal} />;\n    }\n\n    // Sponsor button\n    if (status === ProposalFlowStatus.Sponsor) {\n      return <SponsorAction proposal={proposal} />;\n    }\n\n    // Off-chain voting buttons\n    if (status === ProposalFlowStatus.OffchainVoting) {\n      return (\n        <OffchainVotingAction adapterName={adapterName} proposal={proposal} />\n      );\n    }\n\n    // Off-chain voting submit vote result\n    if (status === ProposalFlowStatus.OffchainVotingSubmitResult) {\n      return (\n        <OffchainOpRollupVotingSubmitResultAction\n          adapterName={adapterName}\n          proposal={proposal}\n        />\n      );\n    }\n\n    // Process button\n    if (\n      status === ProposalFlowStatus.Process ||\n      status === ProposalFlowStatus.OffchainVotingGracePeriod\n    ) {\n      return (\n        <ProcessAction\n          // Show during DAO proposal grace period, but set to disabled\n          disabled={status === ProposalFlowStatus.OffchainVotingGracePeriod}\n          proposal={proposal}\n        />\n      );\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  return (\n    <>\n      {/* STATUS */}\n\n      {(status === ProposalFlowStatus.OffchainVoting ||\n        status === ProposalFlowStatus.OffchainVotingSubmitResult ||\n        status === ProposalFlowStatus.OffchainVotingGracePeriod ||\n        status === ProposalFlowStatus.Process ||\n        status === ProposalFlowStatus.Completed) && (\n        <OffchainVotingStatus\n          countdownGracePeriodStartMs={gracePeriodStartMs}\n          proposal={proposal}\n        />\n      )}\n\n      {/* ACTIONS */}\n\n      <div className=\"proposaldetails__button-container\">{renderActions()}</div>\n\n      {/* ERROR */}\n\n      <ErrorMessageWithDetails\n        error={proposalFlowStatusError}\n        renderText=\"Something went wrong while getting the proposal's status\"\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}