{"version":3,"sources":["components/proposals/ProcessAction.tsx","components/proposals/SponsorAction.tsx","components/proposals/SubmitAction.tsx","components/proposals/ProposalWithOffchainVoteActions.tsx"],"names":["useMemberActionDisabledProps","skipIsActiveMemberCheck","ProcessAction","props","propsDisabled","disabled","snapshotProposal","proposal","useState","submitError","setSubmitError","contracts","useSelector","s","daoRegistryAddress","DaoRegistryContract","contractAddress","account","useWeb3Modal","useContractSend","txEtherscanURL","txIsPromptOpen","txSend","txStatus","useMemberActionDisabled","isDisabled","openWhyDisabledModal","WhyDisabledModal","gasPrices","useETHGasPrice","isInProcess","Web3TxStatus","AWAITING_CONFIRM","PENDING","isDone","FULFILLED","isInProcessOrDone","areSomeDisabled","a","Error","contract","getContractByAddress","actionId","processArguments","idInDAO","txArguments","from","gasPrice","fast","instance","methods","className","onClick","Loader","ErrorMessageWithDetails","error","renderText","CycleMessage","intervalMs","messages","TX_CYCLE_MESSAGES","useFirstItemStart","render","message","FadeIn","EtherscanURL","url","isPending","renderSubmitStatus","title","SponsorAction","snapshotDraft","refetchProposalOrDraft","web3Instance","useSignAndSubmitProposal","proposalSignAndSendStatus","signAndSendProposal","msg","payload","name","body","metadata","timestamp","partialProposalData","adapterAddress","type","SnapshotType","data","signature","preparedVoteVerificationBytes","prepareVoteProposalData","choices","snapshot","toString","start","end","sig","space","parseInt","sponsorArguments","SubmitAction","submitArguments","submitActionArgs","ProposalWithOffchainVoteActions","adapterName","renderActionProp","renderAction","useProposalWithOffchainVoteStatus","daoProposalVoteResult","daoProposalVotes","proposalFlowStatusError","status","gracePeriodStartMs","ProposalFlowStatus","OffchainVotingGracePeriod","Number","gracePeriodStartingTime","renderedActionFromProp","VotingAdapterName","OffchainVotingContract","OffchainVoting","OffchainVotingSubmitResult","Process","Completed","countdownGracePeriodStartMs","Submit","Sponsor"],"mappings":"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","file":"static/js/6.c0fcd907.chunk.js","sourcesContent":["import {useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {CycleEllipsis} from '../feedback';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype ProcessArguments = [\n  string, // `dao`\n  string // `proposalId`\n];\n\ntype ProcessActionProps = {\n  disabled?: boolean;\n  proposal: ProposalData;\n};\n\n/**\n * Cached outside the component to prevent infinite re-renders.\n *\n * The same can be accomplished inside the component using\n * `useState`, `useRef`, etc., depending on the use case.\n */\nconst useMemberActionDisabledProps = {\n  // Anyone can process a proposal - it's just a question of gas payment.\n  skipIsActiveMemberCheck: true,\n};\n\nexport default function ProcessAction(props: ProcessActionProps) {\n  const {\n    disabled: propsDisabled,\n    proposal: {snapshotProposal},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled(useMemberActionDisabledProps);\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING;\n\n  const isDone = txStatus === Web3TxStatus.FULFILLED;\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n  const areSomeDisabled = isDisabled || isInProcessOrDone || propsDisabled;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotProposal) {\n        throw new Error('No Snapshot proposal was found.');\n      }\n\n      const contract = getContractByAddress(\n        snapshotProposal.actionId,\n        contracts\n      );\n\n      const processArguments: ProcessArguments = [\n        daoRegistryAddress,\n        snapshotProposal.idInDAO,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'processProposal',\n        contract.instance.methods,\n        processArguments,\n        txArguments\n      );\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.AWAITING_CONFIRM:\n        return (\n          <>\n            Awaiting your confirmation\n            <CycleEllipsis />\n          </>\n        );\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={areSomeDisabled}\n          onClick={areSomeDisabled ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Process'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is processing disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is processing disabled?\" />\n    </>\n  );\n}\n","import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {\n  prepareVoteProposalData,\n  SnapshotType,\n} from '@openlaw/snapshot-js-erc712';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {useSignAndSubmitProposal} from './hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype SponsorArguments = [\n  string, // `dao`\n  string, // `proposalId`\n  string // `proposal data`\n];\n\ntype SponsorActionProps = {\n  proposal: ProposalData;\n};\n\nexport default function SponsorAction(props: SponsorActionProps) {\n  const {\n    proposal: {snapshotDraft, refetchProposalOrDraft},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account, web3Instance} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled();\n\n  const {\n    proposalSignAndSendStatus,\n    signAndSendProposal,\n  } = useSignAndSubmitProposal<SnapshotType.proposal>();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING ||\n    proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    proposalSignAndSendStatus === Web3TxStatus.PENDING;\n\n  const isDone =\n    txStatus === Web3TxStatus.FULFILLED &&\n    proposalSignAndSendStatus === Web3TxStatus.FULFILLED;\n\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotDraft) {\n        throw new Error('No Snapshot draft was found.');\n      }\n\n      const contract = getContractByAddress(snapshotDraft.actionId, contracts);\n\n      const {\n        msg: {\n          payload: {name, body, metadata},\n          timestamp,\n        },\n      } = snapshotDraft;\n\n      // Sign and submit draft for snapshot-hub\n      const {data, signature} = await signAndSendProposal({\n        partialProposalData: {\n          name,\n          body,\n          metadata,\n          timestamp,\n        },\n        adapterAddress: contract.contractAddress,\n        type: SnapshotType.proposal,\n      });\n\n      /**\n       * Prepare `data` argument for submission to DAO\n       *\n       * For information about which data the smart contract needs for signature verification (e.g. `hashMessage`):\n       * @link https://github.com/openlawteam/molochv3-contracts/blob/master/contracts/adapters/voting/OffchainVoting.sol\n       */\n      const preparedVoteVerificationBytes = prepareVoteProposalData(\n        {\n          payload: {\n            name: data.payload.name,\n            body: data.payload.body,\n            choices: data.payload.choices,\n            snapshot: data.payload.snapshot.toString(),\n            start: data.payload.start,\n            end: data.payload.end,\n          },\n          sig: signature,\n          space: data.space,\n          timestamp: parseInt(data.timestamp),\n        },\n        web3Instance\n      );\n\n      const sponsorArguments: SponsorArguments = [\n        daoRegistryAddress,\n        snapshotDraft.idInDAO,\n        preparedVoteVerificationBytes,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'sponsorProposal',\n        contract.instance.methods,\n        sponsorArguments,\n        txArguments\n      );\n\n      // Update the proposal\n      refetchProposalOrDraft();\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Either Snapshot or chain tx\n    if (\n      txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n      proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM\n    ) {\n      return 'Awaiting your confirmation\\u2026';\n    }\n\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={isDisabled || isInProcessOrDone}\n          onClick={isDisabled || isInProcessOrDone ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Sponsor'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is sponsoring disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is sponsoring disabled?\" />\n    </>\n  );\n}\n","import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {\n  prepareVoteProposalData,\n  SnapshotType,\n} from '@openlaw/snapshot-js-erc712';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {useSignAndSubmitProposal} from './hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype SubmitArguments = [\n  string, // `dao`\n  string, // `proposalId`\n  ...any[],\n  string // `proposal data`\n];\n\ntype SubmitActionProps = {\n  proposal: ProposalData;\n};\n\nexport default function SubmitAction(props: SubmitActionProps) {\n  const {\n    proposal: {snapshotDraft, refetchProposalOrDraft},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account, web3Instance} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled();\n\n  const {\n    proposalSignAndSendStatus,\n    signAndSendProposal,\n  } = useSignAndSubmitProposal<SnapshotType.proposal>();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING ||\n    proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    proposalSignAndSendStatus === Web3TxStatus.PENDING;\n\n  const isDone =\n    txStatus === Web3TxStatus.FULFILLED &&\n    proposalSignAndSendStatus === Web3TxStatus.FULFILLED;\n\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotDraft) {\n        throw new Error('No Snapshot draft was found.');\n      }\n\n      const contract = getContractByAddress(snapshotDraft.actionId, contracts);\n\n      const {\n        msg: {\n          payload: {name, body, metadata},\n          timestamp,\n        },\n      } = snapshotDraft;\n\n      // Sign and submit draft for snapshot-hub\n      const {data, signature} = await signAndSendProposal({\n        partialProposalData: {\n          name,\n          body,\n          metadata,\n          timestamp,\n        },\n        adapterAddress: contract.contractAddress,\n        type: SnapshotType.proposal,\n      });\n\n      /**\n       * Prepare `data` argument for submission to DAO\n       *\n       * For information about which data the smart contract needs for signature verification (e.g. `hashMessage`):\n       * @link https://github.com/openlawteam/molochv3-contracts/blob/master/contracts/adapters/voting/OffchainVoting.sol\n       */\n      const preparedVoteVerificationBytes = prepareVoteProposalData(\n        {\n          payload: {\n            name: data.payload.name,\n            body: data.payload.body,\n            choices: data.payload.choices,\n            snapshot: data.payload.snapshot.toString(),\n            start: data.payload.start,\n            end: data.payload.end,\n          },\n          sig: signature,\n          space: data.space,\n          timestamp: parseInt(data.timestamp),\n        },\n        web3Instance\n      );\n\n      const submitArguments: SubmitArguments = [\n        daoRegistryAddress,\n        snapshotDraft.idInDAO,\n        ...(metadata.submitActionArgs || []),\n        preparedVoteVerificationBytes,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'submitProposal',\n        contract.instance.methods,\n        submitArguments,\n        txArguments\n      );\n\n      // Update the proposal\n      refetchProposalOrDraft();\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Either Snapshot or chain tx\n    if (\n      txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n      proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM\n    ) {\n      return 'Awaiting your confirmation\\u2026';\n    }\n\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={isDisabled || isInProcessOrDone}\n          onClick={isDisabled || isInProcessOrDone ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Sponsor'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is sponsoring disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is sponsoring disabled?\" />\n    </>\n  );\n}\n","import {\n  OffchainVotingStatus,\n  OffchainVotingAction,\n  OffchainOpRollupVotingSubmitResultAction,\n} from './voting';\nimport {\n  ProposalData,\n  ProposalFlowStatus,\n  RenderActionPropArguments,\n} from './types';\nimport {ContractAdapterNames} from '../web3/types';\nimport {useProposalWithOffchainVoteStatus} from './hooks';\nimport {VotingAdapterName} from '../adapters-extensions/enums';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport ProcessAction from './ProcessAction';\nimport SponsorAction from './SponsorAction';\nimport SubmitAction from './SubmitAction';\n\ntype ProposalWithOffchainActionsProps = {\n  adapterName: ContractAdapterNames;\n  proposal: ProposalData;\n  /**\n   * A render prop which can render any action desired.\n   * It is passed inner state and data from\n   * the child action wrapper component.\n   *\n   * - If it renders `null`, it will fall back to the component's actions.\n   * - If it renders `<></>` (`React.Fragment`) then nothing is shown in the UI.\n   */\n  renderAction?: (data: RenderActionPropArguments) => React.ReactNode;\n};\n\nexport default function ProposalWithOffchainVoteActions(\n  props: ProposalWithOffchainActionsProps\n) {\n  const {adapterName, proposal, renderAction: renderActionProp} = props;\n\n  /**\n   * Our hooks\n   */\n\n  const {\n    daoProposalVoteResult,\n    daoProposalVotes,\n    proposalFlowStatusError,\n    status,\n  } = useProposalWithOffchainVoteStatus(proposal);\n\n  /**\n   * Variables\n   */\n\n  // Set the grace period start (per the DAO's timestamp) if the status says we're in grace period.\n  const gracePeriodStartMs: number =\n    daoProposalVotes && status === ProposalFlowStatus.OffchainVotingGracePeriod\n      ? Number(daoProposalVotes.gracePeriodStartingTime) * 1000\n      : 0;\n\n  /**\n   * If a render prop was provided it will render it and pass\n   * internal state and data up to the parent component.\n   */\n  const renderedActionFromProp =\n    renderActionProp &&\n    renderActionProp({\n      [VotingAdapterName.OffchainVotingContract]: {\n        adapterName,\n        daoProposalVoteResult,\n        daoProposalVotes,\n        gracePeriodStartMs,\n        proposal,\n        status,\n      },\n    });\n\n  /**\n   * Functions\n   */\n\n  function renderActions(): React.ReactNode {\n    // If render prop did not return `null` then render its content\n    if (renderedActionFromProp) {\n      return renderedActionFromProp;\n    }\n\n    // Submit/Sponsor button (for proposals that have not been submitted onchain yet)\n    if (status === ProposalFlowStatus.Submit) {\n      return <SubmitAction proposal={proposal} />;\n    }\n\n    // Sponsor button\n    if (status === ProposalFlowStatus.Sponsor) {\n      return <SponsorAction proposal={proposal} />;\n    }\n\n    // Off-chain voting buttons\n    if (status === ProposalFlowStatus.OffchainVoting) {\n      return (\n        <OffchainVotingAction adapterName={adapterName} proposal={proposal} />\n      );\n    }\n\n    // Off-chain voting submit vote result\n    if (status === ProposalFlowStatus.OffchainVotingSubmitResult) {\n      return (\n        <OffchainOpRollupVotingSubmitResultAction\n          adapterName={adapterName}\n          proposal={proposal}\n        />\n      );\n    }\n\n    // Process button\n    if (\n      status === ProposalFlowStatus.Process ||\n      status === ProposalFlowStatus.OffchainVotingGracePeriod\n    ) {\n      return (\n        <ProcessAction\n          // Show during DAO proposal grace period, but set to disabled\n          disabled={status === ProposalFlowStatus.OffchainVotingGracePeriod}\n          proposal={proposal}\n        />\n      );\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  return (\n    <>\n      {/* STATUS */}\n\n      {(status === ProposalFlowStatus.OffchainVoting ||\n        status === ProposalFlowStatus.OffchainVotingSubmitResult ||\n        status === ProposalFlowStatus.OffchainVotingGracePeriod ||\n        status === ProposalFlowStatus.Process ||\n        status === ProposalFlowStatus.Completed) && (\n        <OffchainVotingStatus\n          countdownGracePeriodStartMs={gracePeriodStartMs}\n          proposal={proposal}\n        />\n      )}\n\n      {/* ACTIONS */}\n\n      <div className=\"proposaldetails__button-container\">{renderActions()}</div>\n\n      {/* ERROR */}\n\n      <ErrorMessageWithDetails\n        error={proposalFlowStatusError}\n        renderText=\"Something went wrong while getting the proposal's status\"\n      />\n    </>\n  );\n}\n"],"sourceRoot":""}