{"version":3,"sources":["components/proposals/SubmitAction.tsx","components/proposals/SponsorAction.tsx","components/proposals/ProcessAction.tsx","components/proposals/ProcessActionTribute.tsx","components/proposals/PostProcessAction.tsx","components/proposals/ProposalWithOffchainVoteActions.tsx"],"names":["SubmitAction","props","proposal","snapshotDraft","refetchProposalOrDraft","useState","submitError","setSubmitError","contracts","useSelector","s","daoRegistryAddress","DaoRegistryContract","contractAddress","useWeb3Modal","account","web3Instance","useContractSend","txEtherscanURL","txIsPromptOpen","txSend","txStatus","useMemberActionDisabled","isDisabled","openWhyDisabledModal","WhyDisabledModal","useSignAndSubmitProposal","proposalSignAndSendStatus","signAndSendProposal","gasPrices","useETHGasPrice","isInProcess","Web3TxStatus","AWAITING_CONFIRM","PENDING","isDone","FULFILLED","isInProcessOrDone","a","Error","contract","getContractByAddress","actionId","msg","payload","name","body","metadata","timestamp","partialProposalData","adapterAddress","type","SnapshotType","data","signature","preparedVoteVerificationBytes","prepareVoteProposalData","choices","snapshot","toString","start","end","sig","space","parseInt","submitArguments","idInDAO","submitActionArgs","txArguments","from","gasPrice","fast","instance","methods","className","disabled","onClick","Loader","ErrorMessageWithDetails","error","renderText","CycleMessage","intervalMs","messages","TX_CYCLE_MESSAGES","useFirstItemStart","render","message","FadeIn","EtherscanURL","url","isPending","renderSubmitStatus","title","SponsorAction","sponsorArguments","useMemberActionDisabledProps","skipIsActiveMemberCheck","ProcessAction","propsDisabled","snapshotProposal","areSomeDisabled","processArguments","ProcessActionTribute","isProposalPassed","tributeProposalDetails","setTributeProposalDetails","actionDisabledReasonsRef","useRef","notProposerMessage","TributeContract","state","txEtherscanURLTokenApprove","txIsPromptOpenTokenApprove","txSendTokenApprove","txStatusTokenApprove","setOtherDisabledReasons","getTributeProposalDetailsCached","useCallback","proposals","call","proposalDetails","console","undefined","handleSubmitTokenApprove","tokenAddress","token","tributeAmount","lazyERC20ABI","default","erc20Contract","erc20Instance","eth","Contract","allowance","tributeAmountBN","toBN","allowanceBN","gt","difference","sub","approveValue","add","tokenApproveArguments","useEffect","accountAuthorizedToProcessPassedProposal","current","toLowerCase","Object","values","PostProcessAction","adapterName","alreadyCompletedMessage","daoRegistryContract","getSubmitConfigsByAdapter","ContractAdapterNames","distribute","toIndexArg","isTypeAllMembers","getNbMembers","nbMembers","functionName","functionArguments","renderSubmitStatusByAdapter","renderButtonTextByAdapter","done","distributeContract","distributions","distributeProposal","DistributionStatus","status","IN_PROGRESS","getActionDisabledReasons","ProposalWithOffchainVoteActions","useProposalWithOffchainVoteStatus","daoProposalVotes","daoProposalVoteResult","gracePeriodStartMs","ProposalFlowStatus","OffchainVotingGracePeriod","Number","gracePeriodStartingTime","showPostProcessAction","Completed","VotingState","PASS","OffchainVoting","OffchainVotingSubmitResult","Process","countdownGracePeriodStartMs","Submit","Sponsor","tribute","renderProcessAction"],"mappings":"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","file":"static/js/6.d4d479c1.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {\n  prepareVoteProposalData,\n  SnapshotType,\n} from '@openlaw/snapshot-js-erc712';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {useSignAndSubmitProposal} from './hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype SubmitArguments = [\n  string, // `dao`\n  string, // `proposalId`\n  ...any[],\n  string // `proposal data`\n];\n\ntype SubmitActionProps = {\n  proposal: ProposalData;\n};\n\nexport default function SubmitAction(props: SubmitActionProps) {\n  const {\n    proposal: {snapshotDraft, refetchProposalOrDraft},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account, web3Instance} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled();\n\n  const {\n    proposalSignAndSendStatus,\n    signAndSendProposal,\n  } = useSignAndSubmitProposal<SnapshotType.proposal>();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING ||\n    proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    proposalSignAndSendStatus === Web3TxStatus.PENDING;\n\n  const isDone =\n    txStatus === Web3TxStatus.FULFILLED &&\n    proposalSignAndSendStatus === Web3TxStatus.FULFILLED;\n\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotDraft) {\n        throw new Error('No Snapshot draft was found.');\n      }\n\n      const contract = getContractByAddress(snapshotDraft.actionId, contracts);\n\n      const {\n        msg: {\n          payload: {name, body, metadata},\n          timestamp,\n        },\n      } = snapshotDraft;\n\n      // Sign and submit draft for snapshot-hub\n      const {data, signature} = await signAndSendProposal({\n        partialProposalData: {\n          name,\n          body,\n          metadata,\n          timestamp,\n        },\n        adapterAddress: contract.contractAddress,\n        type: SnapshotType.proposal,\n      });\n\n      /**\n       * Prepare `data` argument for submission to DAO\n       *\n       * For information about which data the smart contract needs for signature verification (e.g. `hashMessage`):\n       * @link https://github.com/openlawteam/molochv3-contracts/blob/master/contracts/adapters/voting/OffchainVoting.sol\n       */\n      const preparedVoteVerificationBytes = prepareVoteProposalData(\n        {\n          payload: {\n            name: data.payload.name,\n            body: data.payload.body,\n            choices: data.payload.choices,\n            snapshot: data.payload.snapshot.toString(),\n            start: data.payload.start,\n            end: data.payload.end,\n          },\n          sig: signature,\n          space: data.space,\n          timestamp: parseInt(data.timestamp),\n        },\n        web3Instance\n      );\n\n      const submitArguments: SubmitArguments = [\n        daoRegistryAddress,\n        snapshotDraft.idInDAO,\n        ...(metadata.submitActionArgs || []),\n        preparedVoteVerificationBytes,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'submitProposal',\n        contract.instance.methods,\n        submitArguments,\n        txArguments\n      );\n\n      // Update the proposal\n      refetchProposalOrDraft();\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Either Snapshot or chain tx\n    if (\n      txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n      proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM\n    ) {\n      return 'Awaiting your confirmation\\u2026';\n    }\n\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={isDisabled || isInProcessOrDone}\n          onClick={isDisabled || isInProcessOrDone ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Sponsor'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is sponsoring disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is sponsoring disabled?\" />\n    </>\n  );\n}\n","import React, {useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {\n  prepareVoteProposalData,\n  SnapshotType,\n} from '@openlaw/snapshot-js-erc712';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {useSignAndSubmitProposal} from './hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype SponsorArguments = [\n  string, // `dao`\n  string, // `proposalId`\n  string // `proposal data`\n];\n\ntype SponsorActionProps = {\n  proposal: ProposalData;\n};\n\nexport default function SponsorAction(props: SponsorActionProps) {\n  const {\n    proposal: {snapshotDraft, refetchProposalOrDraft},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account, web3Instance} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled();\n\n  const {\n    proposalSignAndSendStatus,\n    signAndSendProposal,\n  } = useSignAndSubmitProposal<SnapshotType.proposal>();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING ||\n    proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    proposalSignAndSendStatus === Web3TxStatus.PENDING;\n\n  const isDone =\n    txStatus === Web3TxStatus.FULFILLED &&\n    proposalSignAndSendStatus === Web3TxStatus.FULFILLED;\n\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotDraft) {\n        throw new Error('No Snapshot draft was found.');\n      }\n\n      const contract = getContractByAddress(snapshotDraft.actionId, contracts);\n\n      const {\n        msg: {\n          payload: {name, body, metadata},\n          timestamp,\n        },\n      } = snapshotDraft;\n\n      // Sign and submit draft for snapshot-hub\n      const {data, signature} = await signAndSendProposal({\n        partialProposalData: {\n          name,\n          body,\n          metadata,\n          timestamp,\n        },\n        adapterAddress: contract.contractAddress,\n        type: SnapshotType.proposal,\n      });\n\n      /**\n       * Prepare `data` argument for submission to DAO\n       *\n       * For information about which data the smart contract needs for signature verification (e.g. `hashMessage`):\n       * @link https://github.com/openlawteam/molochv3-contracts/blob/master/contracts/adapters/voting/OffchainVoting.sol\n       */\n      const preparedVoteVerificationBytes = prepareVoteProposalData(\n        {\n          payload: {\n            name: data.payload.name,\n            body: data.payload.body,\n            choices: data.payload.choices,\n            snapshot: data.payload.snapshot.toString(),\n            start: data.payload.start,\n            end: data.payload.end,\n          },\n          sig: signature,\n          space: data.space,\n          timestamp: parseInt(data.timestamp),\n        },\n        web3Instance\n      );\n\n      const sponsorArguments: SponsorArguments = [\n        daoRegistryAddress,\n        snapshotDraft.idInDAO,\n        preparedVoteVerificationBytes,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'sponsorProposal',\n        contract.instance.methods,\n        sponsorArguments,\n        txArguments\n      );\n\n      // Update the proposal\n      refetchProposalOrDraft();\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Either Snapshot or chain tx\n    if (\n      txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n      proposalSignAndSendStatus === Web3TxStatus.AWAITING_CONFIRM\n    ) {\n      return 'Awaiting your confirmation\\u2026';\n    }\n\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={isDisabled || isInProcessOrDone}\n          onClick={isDisabled || isInProcessOrDone ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Sponsor'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is sponsoring disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is sponsoring disabled?\" />\n    </>\n  );\n}\n","import {useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {CycleEllipsis} from '../feedback';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype ProcessArguments = [\n  string, // `dao`\n  string // `proposalId`\n];\n\ntype ProcessActionProps = {\n  disabled?: boolean;\n  proposal: ProposalData;\n};\n\n/**\n * Cached outside the component to prevent infinite re-renders.\n *\n * The same can be accomplished inside the component using\n * `useState`, `useRef`, etc., depending on the use case.\n */\nconst useMemberActionDisabledProps = {\n  // Anyone can process a proposal - it's just a question of gas payment.\n  skipIsActiveMemberCheck: true,\n};\n\nexport default function ProcessAction(props: ProcessActionProps) {\n  const {\n    disabled: propsDisabled,\n    proposal: {snapshotProposal},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n  } = useMemberActionDisabled(useMemberActionDisabledProps);\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING;\n\n  const isDone = txStatus === Web3TxStatus.FULFILLED;\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n  const areSomeDisabled = isDisabled || isInProcessOrDone || propsDisabled;\n\n  /**\n   * Functions\n   */\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotProposal) {\n        throw new Error('No Snapshot proposal was found.');\n      }\n\n      const contract = getContractByAddress(\n        snapshotProposal.actionId,\n        contracts\n      );\n\n      const processArguments: ProcessArguments = [\n        daoRegistryAddress,\n        snapshotProposal.idInDAO,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'processProposal',\n        contract.instance.methods,\n        processArguments,\n        txArguments\n      );\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.AWAITING_CONFIRM:\n        return (\n          <>\n            Awaiting your confirmation\n            <CycleEllipsis />\n          </>\n        );\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={areSomeDisabled}\n          onClick={areSomeDisabled ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Process'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is processing disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is processing disabled?\" />\n    </>\n  );\n}\n","import {useState, useRef, useEffect, useCallback} from 'react';\nimport {useSelector} from 'react-redux';\nimport {toBN, AbiItem} from 'web3-utils';\n\nimport {CycleEllipsis} from '../feedback';\nimport {ProposalData, SnapshotProposal} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype ProcessArguments = [\n  string, // `dao`\n  string // `proposalId`\n];\n\ntype TokenApproveArguments = [\n  string, // `spender`\n  string // `value`\n];\n\ntype TributeProposalDetails = {\n  id: string;\n  applicant: string;\n  tokenToMint: string;\n  requestAmount: string;\n  token: string;\n  tributeAmount: string;\n  tributeTokenOwner: string;\n};\n\ntype ProcessActionTributeProps = {\n  disabled?: boolean;\n  proposal: ProposalData;\n  isProposalPassed: boolean;\n};\n\ntype ActionDisabledReasons = {\n  notProposerMessage: string;\n};\n\n/**\n * Cached outside the component to prevent infinite re-renders.\n *\n * The same can be accomplished inside the component using\n * `useState`, `useRef`, etc., depending on the use case.\n */\nconst useMemberActionDisabledProps = {\n  // Anyone can process a proposal - it's just a question of gas payment.\n  skipIsActiveMemberCheck: true,\n};\n\nexport default function ProcessActionTribute(props: ProcessActionTributeProps) {\n  const {\n    disabled: propsDisabled,\n    proposal: {snapshotProposal},\n    isProposalPassed,\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n  const [\n    tributeProposalDetails,\n    setTributeProposalDetails,\n  ] = useState<TributeProposalDetails>();\n\n  /**\n   * Refs\n   */\n\n  const actionDisabledReasonsRef = useRef<ActionDisabledReasons>({\n    notProposerMessage: '',\n  });\n\n  /**\n   * Selectors\n   */\n\n  const TributeContract = useSelector(\n    (state: StoreState) => state.contracts?.TributeContract\n  );\n  const daoRegistryAddress = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract?.contractAddress\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account, web3Instance} = useWeb3Modal();\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n  const {\n    txEtherscanURL: txEtherscanURLTokenApprove,\n    txIsPromptOpen: txIsPromptOpenTokenApprove,\n    txSend: txSendTokenApprove,\n    txStatus: txStatusTokenApprove,\n  } = useContractSend();\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n    setOtherDisabledReasons,\n  } = useMemberActionDisabled(useMemberActionDisabledProps);\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING ||\n    txStatusTokenApprove === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatusTokenApprove === Web3TxStatus.PENDING;\n  const isDone = txStatus === Web3TxStatus.FULFILLED;\n  const isInProcessOrDone =\n    isInProcess || isDone || txIsPromptOpen || txIsPromptOpenTokenApprove;\n  const areSomeDisabled = isDisabled || isInProcessOrDone || propsDisabled;\n\n  /**\n   * Cached callbacks\n   */\n\n  const getTributeProposalDetailsCached = useCallback(\n    getTributeProposalDetails,\n    [TributeContract, daoRegistryAddress, snapshotProposal]\n  );\n\n  /**\n   * Effects\n   */\n\n  useEffect(() => {\n    getTributeProposalDetailsCached();\n  }, [getTributeProposalDetailsCached]);\n\n  useEffect(() => {\n    // 1. Determine and set reasons why action would be disabled\n\n    // Reason: For some proposal types, a passed proposal can only be\n    // processed by its original proposer (e.g., the owner of the asset to be\n    // transferred)\n\n    // Proposals with this restriction will have this value stored in its\n    // snapshot metadata.\n    const {\n      accountAuthorizedToProcessPassedProposal,\n    } = (snapshotProposal as SnapshotProposal).msg.payload.metadata;\n\n    if (\n      isProposalPassed &&\n      accountAuthorizedToProcessPassedProposal &&\n      account\n    ) {\n      actionDisabledReasonsRef.current = {\n        ...actionDisabledReasonsRef.current,\n        notProposerMessage:\n          accountAuthorizedToProcessPassedProposal.toLowerCase() !==\n          account.toLowerCase()\n            ? 'Only the original proposer can process the proposal.'\n            : '',\n      };\n    }\n\n    // 2. Set reasons\n    setOtherDisabledReasons(Object.values(actionDisabledReasonsRef.current));\n  }, [account, isProposalPassed, setOtherDisabledReasons, snapshotProposal]);\n\n  /**\n   * Functions\n   */\n\n  async function getTributeProposalDetails() {\n    try {\n      if (!snapshotProposal || !TributeContract) return;\n\n      const proposalDetails = await TributeContract.instance.methods\n        .proposals(daoRegistryAddress, snapshotProposal.idInDAO)\n        .call();\n\n      setTributeProposalDetails(proposalDetails);\n    } catch (error) {\n      console.error(error);\n      setTributeProposalDetails(undefined);\n    }\n  }\n\n  async function handleSubmitTokenApprove() {\n    try {\n      if (!tributeProposalDetails) {\n        throw new Error('No Tribute proposal details found.');\n      }\n\n      if (!TributeContract) {\n        throw new Error('No TributeContract found.');\n      }\n\n      if (!account) {\n        throw new Error('No account found.');\n      }\n\n      const {token: tokenAddress, tributeAmount} = tributeProposalDetails;\n\n      const {default: lazyERC20ABI} = await import(\n        '../../truffle-contracts/ERC20.json'\n      );\n      const erc20Contract: AbiItem[] = lazyERC20ABI as any;\n      const erc20Instance = new web3Instance.eth.Contract(\n        erc20Contract,\n        tokenAddress\n      );\n\n      // Value to check if adapter is allowed to spend amount of tribute tokens\n      // on behalf of owner. If allowance is not sufficient, the owner will approve the adapter to spend the amount of\n      // tokens needed for the owner to provide the full tribute amount.\n      const allowance = await erc20Instance.methods\n        .allowance(account, TributeContract.contractAddress)\n        .call();\n\n      const tributeAmountBN = toBN(tributeAmount);\n      const allowanceBN = toBN(allowance);\n\n      if (tributeAmountBN.gt(allowanceBN)) {\n        try {\n          const difference = tributeAmountBN.sub(allowanceBN);\n          const approveValue = allowanceBN.add(difference);\n          const tokenApproveArguments: TokenApproveArguments = [\n            TributeContract.contractAddress,\n            approveValue.toString(),\n          ];\n          const txArguments = {\n            from: account || '',\n            // Set a fast gas price\n            ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n          };\n\n          // Execute contract call for `approve`\n          await txSendTokenApprove(\n            'approve',\n            erc20Instance.methods,\n            tokenApproveArguments,\n            txArguments\n          );\n        } catch (error) {\n          throw new Error(\n            'Your ERC20 tokens could not be approved for transfer.'\n          );\n        }\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async function handleSubmit() {\n    try {\n      if (!daoRegistryAddress) {\n        throw new Error('No DAO Registry address was found.');\n      }\n\n      if (!snapshotProposal) {\n        throw new Error('No Snapshot proposal was found.');\n      }\n\n      if (!TributeContract) {\n        throw new Error('No TributeContract found.');\n      }\n\n      await handleSubmitTokenApprove();\n\n      const processArguments: ProcessArguments = [\n        daoRegistryAddress,\n        snapshotProposal.idInDAO,\n      ];\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        'processProposal',\n        TributeContract.instance.methods,\n        processArguments,\n        txArguments\n      );\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatus(): React.ReactNode {\n    // token approve transaction statuses\n    if (txStatusTokenApprove === Web3TxStatus.AWAITING_CONFIRM) {\n      return (\n        <>\n          Confirm to transfer your tokens\n          <CycleEllipsis />\n        </>\n      );\n    }\n\n    if (txStatusTokenApprove === Web3TxStatus.PENDING) {\n      return (\n        <>\n          <div>\n            Approving your tokens for transfer\n            <CycleEllipsis />\n          </div>\n          <EtherscanURL url={txEtherscanURLTokenApprove} isPending />\n        </>\n      );\n    }\n\n    // process proposal transaction statuses\n    switch (txStatus) {\n      case Web3TxStatus.AWAITING_CONFIRM:\n        return (\n          <>\n            Confirm to process the proposal\n            <CycleEllipsis />\n          </>\n        );\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>Proposal submitted!</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={areSomeDisabled}\n          onClick={areSomeDisabled ? () => {} : handleSubmit}>\n          {isInProcess ? <Loader /> : isDone ? 'Done' : 'Process'}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is processing disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is processing disabled?\" />\n    </>\n  );\n}\n","import React, {useEffect, useState, useRef} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {CycleEllipsis} from '../feedback';\nimport {getContractByAddress} from '../web3/helpers';\nimport {ProposalData, DistributionStatus} from './types';\nimport {StoreState} from '../../store/types';\nimport {TX_CYCLE_MESSAGES} from '../web3/config';\nimport {useContractSend, useETHGasPrice, useWeb3Modal} from '../web3/hooks';\nimport {useMemberActionDisabled} from '../../hooks';\nimport {ContractAdapterNames, Web3TxStatus} from '../web3/types';\nimport CycleMessage from '../feedback/CycleMessage';\nimport ErrorMessageWithDetails from '../common/ErrorMessageWithDetails';\nimport EtherscanURL from '../web3/EtherscanURL';\nimport FadeIn from '../common/FadeIn';\nimport Loader from '../feedback/Loader';\n\ntype ProcessActionProps = {\n  adapterName: ContractAdapterNames;\n  proposal: ProposalData;\n};\n\ntype SubmitConfigs = {\n  functionName: string;\n  functionArguments: any[];\n};\n\ntype ActionDisabledReasons = {\n  alreadyCompletedMessage: string;\n};\n\n/**\n * @note Attempt to keep this component general to handle any adapters that may\n * have post-process actions\n */\nexport default function PostProcessAction(props: ProcessActionProps) {\n  const {\n    adapterName,\n    proposal: {snapshotProposal},\n  } = props;\n\n  /**\n   * State\n   */\n\n  const [submitError, setSubmitError] = useState<Error>();\n\n  /**\n   * Refs\n   */\n\n  const actionDisabledReasonsRef = useRef<ActionDisabledReasons>({\n    alreadyCompletedMessage: '',\n  });\n\n  /**\n   * Selectors\n   */\n\n  const contracts = useSelector((s: StoreState) => s.contracts);\n  const daoRegistryContract = useSelector(\n    (s: StoreState) => s.contracts.DaoRegistryContract\n  );\n\n  /**\n   * Our hooks\n   */\n\n  const {account} = useWeb3Modal();\n\n  const {txEtherscanURL, txIsPromptOpen, txSend, txStatus} = useContractSend();\n\n  const {\n    isDisabled,\n    openWhyDisabledModal,\n    WhyDisabledModal,\n    setOtherDisabledReasons,\n  } = useMemberActionDisabled();\n\n  const gasPrices = useETHGasPrice();\n\n  /**\n   * Variables\n   */\n\n  const isInProcess =\n    txStatus === Web3TxStatus.AWAITING_CONFIRM ||\n    txStatus === Web3TxStatus.PENDING;\n\n  const isDone = txStatus === Web3TxStatus.FULFILLED;\n  const isInProcessOrDone = isInProcess || isDone || txIsPromptOpen;\n  const areSomeDisabled = isDisabled || isInProcessOrDone;\n\n  /**\n   * Effects\n   */\n\n  useEffect(() => {\n    async function getActionDisabledReasons() {\n      // 1. Determine and set reasons why action would be disabled\n\n      // Reason: distribution already completed\n      if (adapterName === ContractAdapterNames.distribute) {\n        if (!snapshotProposal) {\n          throw new Error('No Snapshot proposal was found.');\n        }\n        if (!daoRegistryContract) {\n          throw new Error('No DAO Registry contract was found.');\n        }\n\n        try {\n          const distributeContract = getContractByAddress(\n            snapshotProposal.actionId,\n            contracts\n          );\n          const distributeProposal = await distributeContract.instance.methods\n            .distributions(\n              daoRegistryContract.contractAddress,\n              snapshotProposal.idInDAO\n            )\n            .call();\n\n          actionDisabledReasonsRef.current = {\n            ...actionDisabledReasonsRef.current,\n            alreadyCompletedMessage:\n              DistributionStatus[distributeProposal.status] !==\n              DistributionStatus[DistributionStatus.IN_PROGRESS]\n                ? 'The transfer has already been completed.'\n                : '',\n          };\n        } catch (error) {\n          console.error(error);\n        }\n      }\n\n      // 2. Set reasons\n      setOtherDisabledReasons(Object.values(actionDisabledReasonsRef.current));\n    }\n\n    getActionDisabledReasons();\n  }, [\n    adapterName,\n    contracts,\n    daoRegistryContract,\n    setOtherDisabledReasons,\n    snapshotProposal,\n  ]);\n\n  /**\n   * Functions\n   */\n\n  async function getSubmitConfigsByAdapter(): Promise<SubmitConfigs> {\n    switch (adapterName) {\n      case ContractAdapterNames.distribute:\n        if (!daoRegistryContract) {\n          throw new Error('No DAO Registry contract was found.');\n        }\n\n        let toIndexArg = '0';\n        const isTypeAllMembers =\n          snapshotProposal?.msg.payload.metadata.isTypeAllMembers;\n        if (isTypeAllMembers) {\n          try {\n            const nbMembers = await daoRegistryContract.instance.methods\n              .getNbMembers()\n              .call();\n            toIndexArg = nbMembers.toString();\n          } catch (error) {\n            throw new Error('Error while retrieving number of DAO members');\n          }\n        }\n\n        return {\n          functionName: 'distribute',\n          functionArguments: [daoRegistryContract.contractAddress, toIndexArg],\n        };\n      default:\n        return {functionName: '', functionArguments: []};\n    }\n  }\n\n  async function handleSubmit() {\n    try {\n      if (!snapshotProposal) {\n        throw new Error('No Snapshot proposal was found.');\n      }\n\n      const contract = getContractByAddress(\n        snapshotProposal.actionId,\n        contracts\n      );\n\n      const {\n        functionName,\n        functionArguments,\n      } = await getSubmitConfigsByAdapter();\n\n      const txArguments = {\n        from: account || '',\n        // Set a fast gas price\n        ...(gasPrices ? {gasPrice: gasPrices.fast} : null),\n      };\n\n      await txSend(\n        functionName,\n        contract.instance.methods,\n        functionArguments,\n        txArguments\n      );\n    } catch (error) {\n      setSubmitError(error);\n    }\n  }\n\n  /**\n   * Render\n   */\n\n  function renderSubmitStatusByAdapter(): string {\n    switch (adapterName) {\n      case ContractAdapterNames.distribute:\n        return 'Assets transferred!';\n      default:\n        return 'Action submitted!';\n    }\n  }\n\n  function renderButtonTextByAdapter(): {start: string; done: string} {\n    switch (adapterName) {\n      case ContractAdapterNames.distribute:\n        return {start: 'Transfer assets', done: 'Transfer done'};\n      default:\n        return {start: 'Process action', done: 'Done'};\n    }\n  }\n\n  function renderSubmitStatus(): React.ReactNode {\n    // Only for chain tx\n    switch (txStatus) {\n      case Web3TxStatus.AWAITING_CONFIRM:\n        return (\n          <>\n            Awaiting your confirmation\n            <CycleEllipsis />\n          </>\n        );\n      case Web3TxStatus.PENDING:\n        return (\n          <>\n            <CycleMessage\n              intervalMs={2000}\n              messages={TX_CYCLE_MESSAGES}\n              useFirstItemStart\n              render={(message) => {\n                return <FadeIn key={message}>{message}</FadeIn>;\n              }}\n            />\n\n            <EtherscanURL url={txEtherscanURL} isPending />\n          </>\n        );\n      case Web3TxStatus.FULFILLED:\n        return (\n          <>\n            <div>{renderSubmitStatusByAdapter()}</div>\n\n            <EtherscanURL url={txEtherscanURL} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <div>\n        <button\n          className=\"proposaldetails__button\"\n          disabled={areSomeDisabled}\n          onClick={areSomeDisabled ? () => {} : handleSubmit}>\n          {isInProcess ? (\n            <Loader />\n          ) : isDone ? (\n            renderButtonTextByAdapter()['done']\n          ) : (\n            renderButtonTextByAdapter()['start']\n          )}\n        </button>\n\n        <ErrorMessageWithDetails\n          error={submitError}\n          renderText=\"Something went wrong\"\n        />\n\n        {/* SUBMIT STATUS */}\n\n        {isInProcessOrDone && (\n          <div className=\"form__submit-status-container\">\n            {renderSubmitStatus()}\n          </div>\n        )}\n\n        {isDisabled && (\n          <button\n            className=\"button--help-centered\"\n            onClick={openWhyDisabledModal}>\n            Why is action disabled?\n          </button>\n        )}\n      </div>\n\n      <WhyDisabledModal title=\"Why is action disabled?\" />\n    </>\n  );\n}\n","import {\n  OffchainVotingStatus,\n  OffchainVotingAction,\n  OffchainOpRollupVotingSubmitResultAction,\n} from './voting';\nimport {VotingState} from './voting/types';\nimport {ContractAdapterNames} from '../web3/types';\nimport {ProposalData, ProposalFlowStatus} from './types';\nimport {useProposalWithOffchainVoteStatus} from './hooks';\nimport SubmitAction from './SubmitAction';\nimport SponsorAction from './SponsorAction';\nimport ProcessAction from './ProcessAction';\nimport ProcessActionTribute from './ProcessActionTribute';\nimport PostProcessAction from './PostProcessAction';\n\ntype ProposalWithOffchainActionsProps = {\n  adapterName: ContractAdapterNames;\n  proposal: ProposalData;\n};\n\nexport default function ProposalWithOffchainVoteActions(\n  props: ProposalWithOffchainActionsProps\n) {\n  const {adapterName, proposal} = props;\n\n  /**\n   * Our hooks\n   */\n\n  const {\n    daoProposalVotes,\n    status,\n    daoProposalVoteResult,\n  } = useProposalWithOffchainVoteStatus(proposal);\n\n  /**\n   * Variables\n   */\n\n  // Set the grace period start (per the DAO's timestamp) if the status says we're in grace period.\n  const gracePeriodStartMs: number =\n    daoProposalVotes && status === ProposalFlowStatus.OffchainVotingGracePeriod\n      ? Number(daoProposalVotes.gracePeriodStartingTime) * 1000\n      : 0;\n\n  //  Currently, only Distribute adapter has an action that occurs after the\n  //  proposal is processed.\n  const showPostProcessAction =\n    adapterName === ContractAdapterNames.distribute &&\n    status === ProposalFlowStatus.Completed &&\n    daoProposalVoteResult &&\n    VotingState[daoProposalVoteResult] === VotingState[VotingState.PASS];\n\n  /**\n   * Functions\n   */\n\n  function renderProcessAction() {\n    switch (adapterName) {\n      case ContractAdapterNames.tribute:\n        return (\n          <ProcessActionTribute\n            // Show during DAO proposal grace period, but set to disabled\n            disabled={status === ProposalFlowStatus.OffchainVotingGracePeriod}\n            proposal={proposal}\n            isProposalPassed={\n              !!(\n                daoProposalVoteResult &&\n                VotingState[daoProposalVoteResult] ===\n                  VotingState[VotingState.PASS]\n              )\n            }\n          />\n        );\n      default:\n        return (\n          <ProcessAction\n            // Show during DAO proposal grace period, but set to disabled\n            disabled={status === ProposalFlowStatus.OffchainVotingGracePeriod}\n            proposal={proposal}\n          />\n        );\n    }\n  }\n\n  /**\n   * Render\n   */\n  return (\n    <>\n      {/* OFF-CHAIN VOTING STATUS */}\n      {(status === ProposalFlowStatus.OffchainVoting ||\n        status === ProposalFlowStatus.OffchainVotingSubmitResult ||\n        status === ProposalFlowStatus.OffchainVotingGracePeriod ||\n        status === ProposalFlowStatus.Process ||\n        status === ProposalFlowStatus.Completed) && (\n        <OffchainVotingStatus\n          countdownGracePeriodStartMs={gracePeriodStartMs}\n          proposal={proposal}\n        />\n      )}\n\n      <div className=\"proposaldetails__button-container\">\n        {/* SUBMIT/SPONSOR BUTTON (for proposals that have not been submitted onchain yet) */}\n        {status === ProposalFlowStatus.Submit && (\n          <SubmitAction proposal={proposal} />\n        )}\n\n        {/* SPONSOR BUTTON */}\n        {status === ProposalFlowStatus.Sponsor && (\n          <SponsorAction proposal={proposal} />\n        )}\n\n        {/* OFF-CHAIN VOTING BUTTONS */}\n        {status === ProposalFlowStatus.OffchainVoting && (\n          <OffchainVotingAction adapterName={adapterName} proposal={proposal} />\n        )}\n\n        {/* OFF-CHAIN VOTING SUBMIT VOTE RESULT */}\n        {/* @todo Perhaps use a wrapping component to get the correct off-chain voting component (e.g. op-rollup, batch) */}\n        {status === ProposalFlowStatus.OffchainVotingSubmitResult && (\n          <OffchainOpRollupVotingSubmitResultAction\n            adapterName={adapterName}\n            proposal={proposal}\n          />\n        )}\n\n        {/* PROCESS BUTTON */}\n        {(status === ProposalFlowStatus.OffchainVotingGracePeriod ||\n          status === ProposalFlowStatus.Process) &&\n          renderProcessAction()}\n\n        {/* POST PROCESS BUTTON */}\n        {showPostProcessAction && (\n          <PostProcessAction adapterName={adapterName} proposal={proposal} />\n        )}\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}